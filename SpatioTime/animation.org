#+PROPERTY:  header-args :session *R* :tangle ../docs/R/animation.R :eval no-export
#+OPTIONS: ^:nil

#+begin_src R :exports none :tangle no
setwd('~/github/bookvis')
#+end_src

#+begin_src R :exports none  
##################################################################
## Initial configuration
##################################################################
## Clone or download the repository and set the working directory
## with setwd to the folder where the repository is located.

Sys.setlocale("LC_TIME", 'C')
#+end_src

* Depicting Variable Changes Over Time: Raster Data label:sec:animationST_var

This section uses animation to visualize changes of a raster variable
over time. The procedure is quite simple:

- Plot each layer of the raster to produce a collection of graphic
  files.
- Join these files as a sequence of frames with a suitable tool (for
  example, =ffmpeg=[fn:4]) to create a movie file[fn:5][fn:6].

The effectiveness of this visualization procedure is partly related to
the similitude between consecutive frames. If the frames of the
sequence diverge excessively from one to another, the user will
experience difficulties to perceive any relationship between them. On
the other hand, if the transitions between layers are smooth enough,
the frames will be perceived as conforming to a whole story; and,
moreover, the user will be able to spot both the stable patterns and
the important variations.

 
** Data
#+begin_src R :exports none
##################################################################
## Data
##################################################################
#+end_src

The daily solar radiation CM-SAF data (Chapter ref:cha:rasterST) do
not meet the condition of a smooth transition between layers. The
changes between the consecutive snapshots of daily radiation are too
abrupt to be glued one after another. We will work with a different
dataset in this section.

The THREDSS server[fn:1] of Meteogalicia[fn:2] provides access
through different protocols to the output of a Weather Research
and Forecasting (WRF) model, a mesoscale numerical weather
prediction system. Among the set of available variables we will
use the forecast of hourly cloud cover at low and mid levels. This
space-time raster has a time horizon of 96 hours and a spatial
resolution of 12 kilometers.

#+INDEX: Packages!raster@\texttt{raster}
#+INDEX: Packages!rasterVis@\texttt{rasterVis}

#+INDEX: Data!Cloud cover
#+INDEX: Data!MeteoGalicia
#+INDEX: Subjects!Data processing and cleaning

#+begin_src R
library("raster")
library("rasterVis")

cft <- brick("data/SpatioTime/cft_20130417_0000.nc")
## set projection
projLCC2d <- "+proj=lcc +lon_0=-14.1 +lat_0=34.823 +lat_1=43 +lat_2=43 +x_0=536402.3 +y_0=-18558.61 +units=km +ellps=WGS84"
projection(cft) <- projLCC2d
##set time index
timeIndex <- seq(as.POSIXct("2013-04-17 01:00:00", tz = "UTC"), length = 96, by = "hour")
cft <- setZ(cft, timeIndex)
names(cft) <- format(timeIndex, "D%d_H%H")
#+end_src


** Spatial Context: Administrative Boundaries
#+begin_src R :exports none
##################################################################
## Spatial context: administrative boundaries
##################################################################
#+end_src
Let's provide the spatial context with the countries boundaries,
obtained from the Natural Earth database with the =rnaturalearth=
package. The result of the query is a =sf= object. After being cropped
to the extent of the raster, and transformed to its projection, it is
converted to a =Spatial*= object to be displayed with =sp.lines=.

#+INDEX: Packages!rnaturalearth@\texttt{rnaturalearth}

#+begin_src R 
library("rnaturalearth")
library("sf")
library("sp")

world <- ne_countries(scale = "medium")
## Project the extent of the cft raster to longitude-latitude, because
## rnaturalearth works with it.
cftLL <- projectExtent(cft, crs(boundaries))
## Crop...
boundaries <- st_crop(world, cftLL)
## ... and project to the projection of the cft object
boundaries <- st_transform(boundaries, crs(cft))
## Finally, convert to a Spatial* object
boundaries <- as(boundaries, "Spatial")
#+end_src

#+RESULTS:

** Producing the Frames and the Movie
#+begin_src R :exports none
##################################################################
## Producing frames and movie
##################################################################
#+end_src
The next step is to produce the collection of frames. We will create a
file with each layer of the =RasterBrick= using the =levelplot=
function. This function provides the argument =layout= to control the
arrangement of a multipanel display. If it is set to =c(1,1)=, a
different page is created for each layer.

#+INDEX: Subjects!Animation
#+INDEX: Subjects!Sequential palette

#+begin_src R :eval no-export
library("RColorBrewer")
library("latticeExtra")

cloudTheme <- rasterTheme(region = brewer.pal(n = 9, 'Blues'))

tmp <- tempdir()
trellis.device(png, file = paste0(tmp, "/Rplot%02d.png"),
               res = 300, width = 1500, height = 1500)
levelplot(cft, layout = c(1, 1),
          par.settings = cloudTheme,
          scales=list(draw=FALSE)) +
  layer(sp.lines(boundaries, lwd = 0.6))
dev.off()
#+end_src

A suitable tool to concatenate these frames and create the movie is
=ffmpeg=, a free cross-platform software to record, convert, and stream
audio and video[fn:4]. The resulting movie is available from the book
website.

#+begin_src R :eval no-export
old <- setwd(tmp)
## Create a movie with ffmpeg ...  
system2("ffmpeg",
        c("-r 6", ## with 6 frames per second
          "-i Rplot%02d.png", ## using the previous files
          "-b:v 300k", ## with a bitrate of 300kbs
          "output.mp4")
        )
file.remove(dir(pattern = "Rplot"))
file.copy("output.mp4", paste0(old, "/figs/SpatioTime/cft.mp4"), overwrite = TRUE)
setwd(old)
#+end_src

** Static Image
#+begin_src R :exports none
##################################################################
## Static image
##################################################################
#+end_src
Figure [[fig:cft]] shows a sequence of twenty-four snapshots (second day
of the forecast series) of the movie. This graphic is also created
with =levelplot= but now using the argument =layers= to choose a
subset of the layers, and with a different value for =layout= to
display a matrix of twenty-four panels.

#+INDEX: Subjects!Small multiples

#+begin_src R :results output graphics file :exports both :file figs/SpatioTime/cft.pdf
levelplot(cft,
          layers = 25:48, ## Layers to display (second day)
          layout = c(6, 4), ## Layout of 6 columns and 4 rows
          par.settings = cloudTheme,
          scales=list(draw=FALSE),
          names.attr = paste0(sprintf("%02d", 1:24), "h"),
          panel = panel.levelplot.raster) +
  layer(sp.lines(boundaries, lwd = 0.6))
#+end_src

#+CAPTION: Forecast of hourly cloud cover at low and mid levels.
#+LABEL: fig:cft
#+RESULTS:
[[file:figs/SpatioTime/cft.pdf]]

The movie and the static image are complementary tools and should be
used together. Watching the movie you will perceive the cloud transit
from Galicia to the Pyrenees gradually dissolving over the Cantabrian
region. On the other hand, with Figure [[fig:cft]] you can locate the
position of a group of clouds in a certain hour and simultaneously
observe the relationship of that position with the evolution during
that period. With the movie you will concentrate your attention on the
movement. With small multiple pictures, your focus will be on
positions and relations. You should use both graphical tools to grasp
the entire 3D dataset.

# #+begin_src sh :results silent :exports none
#   mogrify -density 200 -format png figs/SpatioTime/*.pdf 
# #+end_src

** 3D animation

In section ref:sec:3dvisualization an interactive 3D plot of a Digital
Elevation Model was produced with the =rgl= package, a visualization
device system for R using OpenGL as the rendering backend. With the
next code this package generates a 3D animation depicting the cloud
evolution over time.

#+INDEX: Packages!rgl@\texttt{rgl}
#+INDEX: Subjects!3D visualization
#+INDEX: Subjects!Animation

#+begin_src R
library("rgl")

clear3d()

pal <- colorRampPalette(brewer.pal(n = 9, "Blues"))

N <- nlayers(cft)

ids <- lapply(seq_len(N),
              FUN = function(i)
                  plot3D(cft[[i]],
                         maxpixels = 1e3,
                         col = pal,
                         adjust = FALSE, ## Disable automatic scaling of xy axes.
                         zfac = 200)) ## Common z scale for all graphics

#+end_src

#+begin_src R
library("manipulateWidget")

rglwidget() %>%
  playwidget(start = 0, stop = N, 
             subsetControl(1, subsets = ids))
#+end_src

#+CAPTION: 3D animation of the forecast of hourly cloud cover at low and mid levels. label:fig:cftRGL
[[file:figs/SpatioTime/cftRGL.png]]

* \floweroneleft Depicting Variable Changes Over Time: Point Space-Time Data
label:sec:animation_st
 #+begin_src R :exports none
##################################################################
## Point space-time data
##################################################################
 #+end_src

The procedure for point space-time data is more complex than for
raster data. This section details a method built over the
functionalities of the =gridSVG= package. We will work with the
=NO2st= object previously described in the section
ref:sec:intro_pointsST of the chapter ref:sec:cha:pointsST.

#+INDEX: Subjects!Animation

** Initial Snapshot
 #+begin_src R :exports none
##################################################################
## Initial snapshot
##################################################################
#+end_src

The first step is to define the initial parameters of the animation:
starting values and duration.

#+INDEX: Packages!gridSVG@\texttt{gridSVG}

#+begin_src R :exports none
library("sp")
library("zoo")
library("reshape2")
library("spacetime")
  
airStationsSP <- read.csv2("data/Spatial/airStations.csv")
rownames(airStationsSP) <- substring(airStationsSP$Code, 7)
coordinates(airStationsSP) <- ~ long + lat
proj4string(airStationsSP) <- CRS("+proj=longlat +ellps=WGS84")
airQuality <- read.csv2("data/Spatial/airQuality.csv")
NO2 <- airQuality[airQuality$codParam == 8, ]
  
NO2$time <- as.Date(with(NO2, 
                         ISOdate(year, month, day)))

NO2wide <- dcast(NO2[, c("codEst", "dat", "time")],             
                 time ~ codEst,
                 value.var = "dat")

NO2zoo <- zoo(NO2wide[,-1], NO2wide$time)                       

dats <- data.frame(vals = as.vector(t(NO2zoo)))                 

NO2st <- STFDF(sp = airStationsSP,                              
               time = index(NO2zoo),
               data = dats)
#+end_src

#+begin_src R 
library("gridSVG")
## Initial parameters
start <- NO2st[,1]
## values will be encoded as size of circles,
## so we need to scale them
startVals <- start$vals/5000

nStations <- nrow(airStationsSP)
days <- index(NO2zoo)
nDays <- length(days)
## Duration in seconds of the animation
duration <- nDays*.3
#+end_src

The first snapshot of the data is produced with =spplot=. We define an
auxiliary function, =panel.circlesplot=, to display the data encoding
values with circles of variable size and color.  This function
uses =grid.circle= from the =grid= package.  

The subsequent frames of the animation will modify the colors and
sizes of the circles according to the =NO2st= object.

#+INDEX: Packages!grid@\texttt{grid}

#+begin_src R 
library("grid")

## Auxiliary panel function to display circles
panel.circlesplot <- function(x, y, cex, col = "gray",
                              name = "stationsCircles", ...) {
  grid.circle(x, y, r = cex,
              gp = gpar(fill = col, alpha = 0.5),
              default.units = "native", name = name)
}

pStart <- spplot(start, panel = panel.circlesplot,
                 cex = startVals,
                 scales = list(draw = TRUE), auto.key = FALSE)
pStart
#+end_src

** Intermediate States to Create the Animation
#+begin_src R :exports none
##################################################################
## Intermediate states to create the animation
##################################################################
#+end_src

From this initial state, =grid.animate= creates a collection of
animated graphical objects with the intermediate states defined by
=animUnit= and =animValue=.  As previously stated, the $NO_2$ values
will be encoded with the radius of each circle, and the color of the
circles will distinguish between weekdays and weekend.  The use of
=rep=TRUE= ensures that the animation will be repeated indefinitely.


#+begin_src R 
## Color to distinguish between weekdays ('green') and weekend
## ('blue')
isWeekend <- function(x) {format(x, "%w") %in% c(0, 6)}
color <- ifelse(isWeekend(days), "blue", "green")
colorAnim <- animValue(rep(color, each = nStations),
                       id = rep(seq_len(nStations), nDays))

## Intermediate sizes of the circles
vals <- NO2st$vals/5000
vals[is.na(vals)] <- 0
radius <- animUnit(unit(vals, "native"),
                   id = rep(seq_len(nStations), nDays))                     

## Animation of circles including sizes and colors
grid.animate("stationsCircles",
             duration = duration,
             r = radius,
             fill = colorAnim,
             rep = TRUE)
#+end_src  

** Time Reference: Progress Bar
 #+begin_src R :exports none
##################################################################
## Time reference: progress bar
##################################################################
#+end_src

Information from an animation is better understood if a time
reference is included, for example with a progress bar.  The following
code builds a progress bar with ticks at the first day of each
month, and with color changing from gray (background) to blue as
the time advances.  On the other hand, it is convenient to provide
a method so the user can stop and restart the animation sequence
if desired.  This functionality is added with the definition of
two events, =onmouseover= and =onmouseout=, included with the
=grid.garnish= function.

#+begin_src R 
## Progress bar
prettyDays <- pretty(days, 12)
## Width of the progress bar
pbWidth <- .95
## Background
grid.rect(.5, 0.01, width = pbWidth, height = .01,
          just = c("center", "bottom"),
          name = "bgbar", gp = gpar(fill = "gray"))

## Width of the progress bar for each day
dayWidth <- pbWidth/nDays
ticks <- c(0, cumsum(as.numeric(diff(prettyDays)))*dayWidth) + .025
grid.segments(ticks, .01, ticks, .02)
grid.text(format(prettyDays, "%d-%b"),
          ticks, .03, gp = gpar(cex = .5))
## Initial display of the progress bar
grid.rect(.025, .01, width = 0,
          height = .01, just = c("left", "bottom"),
          name = "pbar", gp = gpar(fill = "blue", alpha = ".3"))
## ...and its animation
grid.animate("pbar", duration = duration,
             width = seq(0, pbWidth, length = duration),
             rep = TRUE)
## Pause animations when mouse is over the progress bar
grid.garnish("bgbar",
             onmouseover = "document.documentElement.pauseAnimations()",
             onmouseout = "document.documentElement.unpauseAnimations()")
#+end_src   

The SVG file is finally produced with =grid.export= (Figure ref:fig:NO2pb)


#+begin_src R 
grid.export("figs/SpatioTime/NO2pb.svg")
#+end_src

#+CAPTION: Animated circles of the $NO_2$ space-time data with a progress bar. label:fig:NO2pb
file:figs/SpatioTime/NO2pb.png


** Time Reference: A Time Series Plot
#+begin_src R :exports none
##################################################################
## Time reference: a time series plot
##################################################################
#+end_src
A different and more informative solution is to add a time series
plot instead of a progress bar.  This time series plot displays
the average value of the set of stations, with a point and a
vertical line to highlight the time position as the animation
advances (Figure ref:fig:vLine).
#+begin_src R
library(lattice)
library(latticeExtra)

## Time series with average value of the set of stations
NO2mean <- zoo(rowMeans(NO2zoo, na.rm = TRUE), index(NO2zoo))
## Time series plot with position highlighted
pTimeSeries <- xyplot(NO2mean, xlab = "", identifier = "timePlot") +
  layer({
    grid.points(0, .5, size = unit(.5, "char"),
                default.units = "npc",
                gp = gpar(fill = "gray"),
                name = "locator")
    grid.segments(0, 0, 0, 1, name = "vLine")
  })

print(pStart, position = c(0, .2, 1, 1), more = TRUE)
print(pTimeSeries, position = c(.1, 0, .9, .25))
#+end_src


Once again, =grid.animate= creates a sequence of intermediate states
for each object of the graphical scenes: The signaling point and
vertical line follow the time evolution, while the sizes and colors of
each station circle change as in the previous approach.  Moreover, the
=onmouseover= and =onmouseout= events are defined with =grid.garnish=
so the user can pause and restart the animation by hovering the mouse
over the time series plot.

#+begin_src R 
grid.animate("locator",
             x = unit(as.numeric(index(NO2zoo)), "native"),
             y = unit(as.numeric(NO2mean), "native"),
             duration = duration, rep = TRUE)
#+end_src

#+begin_src R 
xLine <- unit(index(NO2zoo), "native")

grid.animate("vLine",
             x0 = xLine, x1 = xLine,
             duration = duration, rep = TRUE)
#+end_src

#+begin_src R 
grid.animate("stationsCircles",
             duration = duration,
             r = radius,
             fill = colorAnim,
             rep = TRUE)
#+end_src

#+begin_src R 
## Pause animations when mouse is over the time series plot
grid.garnish("timePlot", grep = TRUE,
             onmouseover = "document.documentElement.pauseAnimations()",
             onmouseout = "document.documentElement.unpauseAnimations()")

grid.export("figs/SpatioTime/vLine.svg")

grid.export("/tmp/vLine.svg")
#+end_src

#+CAPTION: Animated circles of the $NO_2$ space-time data with a time series as reference. label:fig:vLine
[[file:figs/SpatioTime/vLine.png]]


* Fly-by Animation label:sec:animationST_3d

In this section the =rgl= package is used to generate a fly-by animation over the Earth, as an example of an animation depicting changes of a spatial attribute.

#+INDEX: Subjects!Animation
#+INDEX: Subjects!3D visualization

*** Basic 3D Earth

Firstly, a basic 3D Earth at night is created with the =surface3d= function, using the night lights images published by the NASA[fn:3].

#+INDEX: Packages!rgl@\texttt{rgl}
#+INDEX: Packages!magick@\texttt{magick}
#+INDEX: Data!NASA images
#+INDEX: Data!Night lights

#+begin_src R
library("rgl")
library("magick") ## needed to import the texture

## Opens the OpenGL device with a black background
open3d()
bg3d("black")

## XYZ coordinates of a sphere
lat <- seq(-90, 90, len = 100) * pi/180
long <- seq(-180, 180, len = 100) * pi/180
r <- 6378.1 # radius of Earth in km
x <- outer(long, lat, FUN = function(x, y) r * cos(y) * cos(x))
y <- outer(long, lat, FUN = function(x, y) r * cos(y) * sin(x))
z <- outer(long, lat, FUN = function(x, y) r * sin(y))

## Read, scale, and convert the image
nightLightsJPG <- image_read("https://eoimages.gsfc.nasa.gov/images/imagerecords/79000/79765/dnb_land_ocean_ice.2012.13500x6750.jpg")
nightLightsJPG <- image_scale(nightLightsJPG, "8192") ## surface3d reads files up to 8192x8192
nightLights <- image_write(nightLightsJPG, tempfile(),
                           format = "png") ## Only the png format is supported
## Display the sphere with the image superimposed
surface3d(-x, -z, y,
          texture = nightLights,
          specular = "black", col = "white")
#+end_src

This OpenGL object can be exported to different formats. For example,
Figure ref:fig:WebGL shows a snapshot of the WebGL figure created with
=rglwidget=:

#+begin_src R
rglwidget()
#+end_src

#+CAPTION: Snapshot of the WebGL figure created with =rglwidget=. label:fig:WebGL
[[file:figs/SpatioTime/nightLights.png]]

*** Define the Locations

Once the Earth is represented with the sphere and the superimposed
image, the fly-by animation is defined with a set of locations to be
visited:

#+begin_src R
cities <- rbind(c("Madrid", "Spain"),
                c("Tokyo", "Japan"),
                c("Sidney", "Australia"),
                c("Sao Paulo", "Brazil"),
                c("New York", "USA"))
cities <- as.data.frame(cities)
names(cities) <- c("city", "country")
#+end_src

The latitude and longitude coordinates of these cities can be obtained
through the Nominatim service of OpenStreetMap with the package
=osmdata=. The function =getbb= of this package returns the bounding
box of a city. The auxiliary function =geocode= defined below computes
the center of each bounding box.

#+INDEX: Packages!osmdata@\texttt{osmdata}
#+INDEX: Data!OpenStreetMap

#+begin_src R
library("osmdata")

geocode <- function(x) {
  place <- paste(x, collapse = ", ")
  bb <- getbb(place)
  center <- c(sum(bb[1, ])/2, sum(bb[2, ]/2))
  center
}

points <- apply(cities, 1, geocode)
points <- t(points)
colnames(points) <- c("lon", "lat")

cities <- cbind(cities, points)
#+end_src

*** Generate the Route 

The next step computes the intermediate points between each pair of
locations. The =geosphere= package provides the =gcIntermediate=
function for this task:

#+INDEX: Packages!geosphere@\texttt{geosphere}
#+INDEX: Subjects!Data processing and cleaning

#+begin_src R
library("geosphere")

## When arriving or departing include a progressive zoom with 100
## frames
zoomIn <- seq(.3, .1, length = 100)
zoomOut <- seq(.1, .3, length = 100)

## First point of the route
route <- data.frame(lon = cities[1, "lon"],
                    lat = points[1, "lat"],
                    zoom = zoomIn,
                    name = cities[1, "city"],
                    action = "arrive")

## This loop visits each location included in the "points" set
## generating the route.
for (i in 1:(nrow(cities) - 1)) {

  p1 <- cities[i,]
  p2 <- cities[i + 1,] 
  ## Initial location
  departure <- data.frame(lon = p1$lon,
                          lat = p1$lat,
                          zoom = zoomOut,
                          name = p1$city,
                          action = "depart")
  
  ## Travel between two points: Compute 100 points between the
  ## initial and the final locations.
  routePart <- gcIntermediate(p1[, c("lon", "lat")],
                              p2[, c("lon", "lat")],
                              n = 100)
  routePart <- data.frame(routePart)
  routePart$zoom <- 0.3
  routePart$name <- ""
  routePart$action <- "travel"
  
  ## Final location
  arrival <- data.frame(lon = p2$lon,
                        lat = p2$lat,
                        zoom = zoomIn,
                        name = p2$city,
                        action = "arrive")
  ## Complete route: initial, intermediate, and final locations.
  routePart <- rbind(departure, routePart, arrival)
  route <- rbind(route, routePart)
}
#+end_src

#+RESULTS:

#+begin_src R :results output :exports both
## Close the travel
route <- rbind(route,
               data.frame(lon = cities[i + 1, "lon"],
                          lat = cities[i + 1, "lat"],
                          zoom = zoomOut,
                          name = cities[i+1, "city"],
                          action = "depart"))

summary(route)
#+end_src

#+ATTR_LATEX: :environment results
#+RESULTS:
#+begin_example
      lon                lat               zoom            name          
 Min.   :-178.490   Min.   :-74.728   Min.   :0.1000   Length:1500       
 1st Qu.: -62.896   1st Qu.:-23.683   1st Qu.:0.1687   Class :character  
 Median :  -3.703   Median : 28.056   Median :0.2374   Mode  :character  
 Mean   :  28.233   Mean   :  9.974   Mean   :0.2267                     
 3rd Qu.: 145.030   3rd Qu.: 40.697   3rd Qu.:0.3000                     
 Max.   : 179.446   Max.   : 68.796   Max.   :0.3000                     
    action         
 Length:1500       
 Class :character  
 Mode  :character
#+end_example

*** Produce the Frames

Finally, this matrix of points is used to change the viewpoint of the
OpenGL scene with the =view3d= function. The =travel= function wraps
this function to automate the process with the =movie3d= function and
returns a list of parameters of the scene. Figure
ref:fig:travel_example shows an example of a frame produced with this
function.

#+begin_src R
## Function to move the viewpoint in the RGL scene according to the
## information included in the route (position and zoom).
travel <- function(tt) {
  point <- route[tt,]
  view3d(theta = -90 + point$lon,
         phi = point$lat,
         zoom = point$zoom)
  par3d()
}
#+end_src

#+RESULTS:

#+begin_src R
## Example of usage of travel
## Frame no.1200
travel(1200)
rgl.snapshot("figs/SpatioTime/rgl_travel1200.png")
#+end_src

#+CAPTION: Example of usage of the =travel= function (frame no.1200). label:fig:travel_example
[[file:figs/SpatioTime/rgl_travel1200.png]]

The =movie3d= accepts a function returning a list of parameters,
=travel= in our code, to modify the RGL scene. It creates an snapshot
at each step, and paste these snapshots as frames of a movie.

#+begin_src R
movie3d(travel,
        duration = nrow(route),
        startTime = 1, fps = 1,
        type = "mp4", clean = FALSE,
        webshot = FALSE)
#+end_src

* Footnotes

[fn:1] http://mandeo.meteogalicia.es/thredds/catalogos/WRF_2D/catalog.html

[fn:2] http://www.meteogalicia.es


[fn:3] The page "Out of the Blue and Into the Black: New Views of the Earth at Night", https://earthobservatory.nasa.gov/Features/IntotheBlack/, provides detailed information about the Earth at Night maps. 

[fn:4] http://www.ffmpeg.org/

[fn:5] The =animation= package \cite{Xie2013} defines several functions to wrap =ffmpeg= and =convert= from ImageMagick.

[fn:6] An alternative method is the LaTeX animate package, which
    provides an interface to create portable JavaScript-driven PDF
    animations from rasterized image files.


