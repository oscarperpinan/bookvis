#+PROPERTY:  header-args :session *R* :tangle ../docs/R/choropleth.R :eval no-export
#+OPTIONS: ^:nil
#+BIND: org-latex-image-default-height  "0.45\\textheight"

#+begin_src R :exports none :tangle no
setwd('~/github/bookvis/')
#+end_src


#+begin_src R :exports none  
##################################################################
## Initial configuration
##################################################################
## Clone or download the repository and set the working directory
## with setwd to the folder where the repository is located.
 
library("lattice")
library("ggplot2")
## latticeExtra must be loaded after ggplot2 to prevent masking of its
## `layer` function.
library("latticeExtra")

source('configLattice.R')
##################################################################
#+end_src


* Introduction

This chapter details how to create choropleth maps depicting the
results of the 2016 Spanish general elections. The section
ref:sec:dataChoropleth describes how to define a
=SpatialPolygonsDataFrame= combining the data from a =data.frame= and
the spatial information of the administrative boundaries from a
shapefile[fn:8]. 

As exposed in Chapter ref:cha:bubble, two alternatives are available: 

1. Import the data with the =rgdal= package and the function
   =readOGR=, and display the information with the =sp= package and
   the =spplot= function (based on =lattice= graphics).
2. Import the data with the =sf= package and the function =st_read=,
   and display the information with the =ggplot2= package and the
   =geom_sf= function.

** Read Data

#+begin_src R :exports none  
##################################################################
## Read data
##################################################################
#+end_src

The =sp= approach reads the files with =readOGR= to produce
=SpatialPolygonsDataFrame= object. Because the coordinate reference
system[fn:4] is not stored in the files, it must be set with the =p4s=
argument.

#+INDEX: Data!INE
#+INDEX: Data!Spanish General Elections

#+begin_src R 
## sp approach
library("sp")
library("rgdal")

spMapVotes <- readOGR("data/spMapVotes.shp", 
                      p4s = "+proj=utm +zone=30 +ellps=GRS80 +units=m +no_defs")
#+end_src

This =SpatialPolygonsDataFrame= contains two main variables:
=whichMax=, the name of the predominant political option, and =pcMax=,
the percentage of votes obtained by this political option.

#+begin_src R :results output :exports results :tangle no
summary(spMapVotes)
#+end_src

#+ATTR_LATEX: :environment results
#+RESULTS:
#+begin_example
Object of class SpatialPolygonsDataFrame
Coordinates:
      min     max
x  -13952 1127057
y 3903525 4859444
Is projected: TRUE 
proj4string :
[+proj=utm +zone=30 +ellps=GRS80 +units=m +no_defs]
Data attributes:
    PROVMUN     whichMax         Max               pcMax      
 01001  :   1   ABS :2812   Min.   :     2.0   Min.   :21.33  
 01002  :   1   C.s :   3   1st Qu.:    54.0   1st Qu.:31.68  
 01003  :   1   OTH : 170   Median :   162.0   Median :35.64  
 01004  :   1   PP  :4212   Mean   :  1395.9   Mean   :37.58  
 01006  :   1   PSOE: 776   3rd Qu.:   636.5   3rd Qu.:41.27  
 01008  :   1   UP  : 137   Max.   :696804.0   Max.   :94.74  
 (Other):8104
#+end_example

The =sf= approach reads the files with =st_read=, and sets the coordinate reference system with =st_crs=, using directly the EPSG code[fn:6].

#+INDEX: Packages!sf@\texttt{sf}

#+begin_src R
## sf approach
library("sf")

sfMapVotes <- st_read("data/spMapVotes.shp")
st_crs(sfMapVotes) <- 25830
#+end_src

#+begin_src R :results output :exports results :tangle no
summary(sfMapVotes)
#+end_src

#+ATTR_LATEX: :environment results
#+RESULTS:
#+begin_example
     SP_ID         PROVMUN     whichMax         Max               pcMax      
 01001  :   1   01001  :   1   ABS :2812   Min.   :     2.0   Min.   :21.33  
 01002  :   1   01002  :   1   C.s :   3   1st Qu.:    54.0   1st Qu.:31.68  
 01003  :   1   01003  :   1   OTH : 170   Median :   162.0   Median :35.64  
 01004  :   1   01004  :   1   PP  :4212   Mean   :  1395.9   Mean   :37.58  
 01006  :   1   01006  :   1   PSOE: 776   3rd Qu.:   636.5   3rd Qu.:41.27  
 01008  :   1   01008  :   1   UP  : 137   Max.   :696804.0   Max.   :94.74  
 (Other):8104   (Other):8104                                                 
          geometry   
 MULTIPOLYGON :8110  
 epsg:25830   :   0  
 +proj=utm ...:   0
#+end_example

** Province Boundaries
#+begin_src R :exports none  
##################################################################
## Province Boundaries
##################################################################
#+end_src

As a visual aid, the subsequent maps will be produced with the
province boundaries superposed. These boundaries are encoded in the
=spain_provinces= shapefile. The =spplot= function that will generate
the maps, offers the argument =sp.layout= to add additional layers to
the map[fn:2]. This argument should be a list: its first element is the
function to display the layer, the second element is the object to be
represented, and the rest of elements are arguments to the function
defined in the first element.

#+begin_src R
## sp
provinces <- readOGR("data/spain_provinces.shp",
                     p4s = "+proj=utm +zone=30 +ellps=GRS80 +units=m +no_defs")

provinceLines <- list("sp.polygons", provinces, lwd = 0.1)
#+end_src

#+begin_src R
## sf
sfProvs <- st_read("data/spain_provinces.shp")
st_crs(sfProvs) <- 25830
#+end_src

#+RESULTS:

* Quantitative Variable
label:sec:quantitative_choropleth

#+begin_src R :exports none  
##################################################################
## Quantitative variable
##################################################################
#+end_src

First, let's display =pcMax=, a quantitative variable increasing from
low to high. This type of variables are well suited to sequential
palettes, that communicate the progression from low to high with light
colors associated to low values, and dark colors linked to high
values. The well-known service ColorBrewer[fn:1] provides several
choices, available in =R= via the =RColorBrewer= package
cite:Neuwirth2014.

#+INDEX: Packages!RColorBrewer@\texttt{RColorBrewer}
#+INDEX: Subjects!Sequential palette

#+begin_src R
library("RColorBrewer")

## Number of intervals (colors)
N <- 6
## Sequential palette
quantPal <- brewer.pal(n = N, "Oranges")
#+end_src

The most common approach with choropleth maps, the classed choropleth,
is to divide the data into classes. Although this method produces a
filtered view of the data, it reduces the random noise in the
information, and makes it easy to compare regions. A different
alternative is the unclassed choropleth, where each unique data value
gets a unique color. This approach is recommended to get a unfiltered
view of the data and highlight overall geographic patterns of the
variable.

Figure ref:fig:pcMaxUC is an unclassed choropleth depicting the
=pcMax= variable. It uses a palette created by interpolation with the
=colorRampPalette= function.
 
#+begin_src R
## Number of cuts
ucN <- 1000
## Palette created with interpolation
ucQuantPal <- colorRampPalette(quantPal)(ucN)
#+end_src

#+begin_src R :results output graphics :exports both :file figs/pcMaxUC.pdf
## The polygons boundaries are not displayed thanks to col = 'transparent' 
spplot(spMapVotes["pcMax"],
       col.regions = ucQuantPal,
       cuts = ucN,
       ## Do not draw municipality boundaries
       col = 'transparent',
       ## Overlay province boundaries
       sp.layout = provinceLines)    
#+end_src

#+CAPTION: Quantitative choropleth map displaying the percentage of votes obtained by the predominant political option in each municipality in the 2016 Spanish general elections using a continuous color ramp (unclassed choropleth). label:fig:pcMaxUC
#+RESULTS:
[[file:figs/pcMaxUC.pdf]]

** Data Classification
#+begin_src R :exports none  
##################################################################
## Data classification
##################################################################
#+end_src

It is evident in Figure ref:fig:pcMaxUC that the =pcMax= variable is
concentrated in the 0.2-0.4 range. Figure ref:fig:densityChoropleth
displays the density estimation of this variable grouping by the
political option. This result suggests to use data classification.

#+INDEX: Subjects!Class Intervals

#+begin_src R :results output graphics :exports both :file figs/densityChoropleth.pdf
ggplot(as.data.frame(spMapVotes),
       aes(pcMax,
           fill = whichMax,
           colour = whichMax)) +
    geom_density(alpha = 0.1) +
    theme_bw()
#+end_src

#+CAPTION: Density estimation of the predominant political option in each municipality in the 2016 Spanish general elections grouping by the political option. label:fig:densityChoropleth
#+RESULTS:
[[file:figs/densityChoropleth.pdf]]

The number of data classes is the result of a compromise between
information amount and map legibility. A general recommendation is to
use three to seven classes, depending on the data. 

On the other hand, there is a wide catalog of classification methods,
and the =classInt= package implements most of them (previously used in
Section ref:sec:classification_bubble). Figures
ref:fig:quantile_intervals and ref:fig:fisher_intervals depict the
empirical cumulative distribution function of =pcMax= with the
intervals computed with the quantile method and the natural breaks
method, a clustering method that seeks to reduce the variance within
classes and maximize the variance between classes. As it can be
inferred from the density estimation (Figure
ref:fig:densityChoropleth), the natural breaks method is preferred in
this example, because with the quantile method very different values
will be assigned to the same class.

#+INDEX: Packages!classInt@\texttt{classInt}

#+begin_src R
library("classInt")

## Compute intervals with the same number of elements
intQuant <- classIntervals(spMapVotes$pcMax,
                           n = N, style = "quantile")
## Compute intervals with the natural breaks algorithm
intFisher <- classIntervals(spMapVotes$pcMax,
                            n = N, style = "fisher")
#+end_src

#+RESULTS:

#+begin_src R :results output graphics :exports both :file figs/quantile_intervals.pdf
plot(intQuant, pal = quantPal, main = "")
#+end_src

#+begin_src R :results output graphics :exports both :file figs/fisher_intervals.pdf
plot(intFisher, pal = quantPal, main = "")
#+end_src

#+CAPTION: Quantile method for setting class intervals label:fig:quantile_intervals
#+RESULTS:
[[file:figs/quantile_intervals.pdf]]

#+CAPTION: Natural breaks method for setting class intervals label:fig:fisher_intervals
#+RESULTS:
[[file:figs/fisher_intervals.pdf]]


Figure ref:fig:pcMax is a classed choropleth with the natural breaks
classification. It is produced with =spplot= displaying a categorical
variable created with the function =cut= and the breaks computed with
=classIntervals=.

#+begin_src R :results output graphics :exports both :file figs/pcMax.pdf
## spplot solution

## Add a new categorical variable with cut, using the computed breaks
spMapVotes$pcMaxInt <- cut(spMapVotes$pcMax,
                            breaks = intFisher$brks)

spplot(spMapVotes["pcMaxInt"],
       col = 'transparent',
       col.regions = quantPal,
       sp.layout = provinceLines)
#+end_src

#+CAPTION: Quantitative choropleth map displaying the percentage of votes obtained by the predominant political option in each municipality in the 2016 Spanish general elections using a classification (classed choropleth). label:fig:pcMax
#+RESULTS:
[[file:figs/pcMax.pdf]]


#+begin_src R
## sf and geom_sf
sfMapVotes$pcMaxInt <- cut(sfMapVotes$pcMax,
                           breaks = intFisher$brks)

ggplot(sfMapVotes) +
    ## Display the pcMaxInt variable...
    geom_sf(aes(fill = pcMaxInt),
            ## without drawing municipality boundaries
            color = "transparent") +
    scale_fill_brewer(palette = "Oranges") +
    ## And overlay provinces boundaries
    geom_sf(data = sfProvs,
            fill = 'transparent',
            ## but do not include them in the legend
            show.legend = FALSE) +
    theme_bw()
#+end_src


* Qualitative Variable
#+begin_src R :exports none  
##################################################################
## Qualitative variable
##################################################################
#+end_src

On the other hand, =whichMax= is a categorical value with four levels:
the main parties (=PP=, =PSOE=, =UP=, =Cs=), the abstention results
(=ABS=), and the rest of the parties (=OTH=). 

#+begin_src R :results output :exports results :tangle no
summary(spMapVotes$whichMax)
#+end_src

#+RESULTS:
:  ABS  C.s  OTH   PP PSOE   UP 
: 2812    3  170 4212  776  137

Figure ref:fig:whichMax encodes these levels with a qualitative palette from ColorBrewer.

#+INDEX: Packages!RColorBrewer@\texttt{RColorBrewer}
#+INDEX: Subjects!Qualitative palette

#+begin_src R 
classes <- levels(factor(spMapVotes$whichMax))
nClasses <- length(classes)

qualPal <- brewer.pal(nClasses, "Dark2")
#+end_src

#+begin_src R :results output graphics :exports both :file figs/whichMax.pdf
## spplot solution
spplot(spMapVotes["whichMax"],
       col.regions = qualPal,
       col = 'transparent',
       sp.layout = provinceLines)
#+end_src

#+CAPTION: Categorical choropleth map displaying the name of the predominant political option in each municipality in the 2016 Spanish general elections. label:fig:whichMax
#+RESULTS:
[[file:figs/whichMax.pdf]]

#+begin_src R
## geom_sf solution
ggplot(sfMapVotes) +
    geom_sf(aes(fill = whichMax),
            color = "transparent") +
    scale_fill_brewer(palette = 'Dark2') +
    geom_sf(data = sfProvs,
            fill = 'transparent',
            show.legend = FALSE) +
    theme_bw()
#+end_src

* Small Multiples with Choropleth Maps
#+begin_src R :exports none  
##################################################################
## Small multiples
##################################################################
#+end_src

Both the quantitative and qualitative variables can be combined using
the small multiples technique (Sections ref:SEC:sameScale and
ref:SEC:groupVariable) cite:Tufte1990: multiple maps displayed all at
once to compare the differences between them. The next code produce a
matrix of maps, with a map for each political option defined by the
categorical variable =whichMax=. The =spplot= function
provides a =formula= argument to divide the data into panels. However,
its usage is not well documented and cannot be recommended. Instead,
the =ggplot= approach is easy to use thanks to the =facet_wrap=
function. The result is displayed in Figure ref:fig:pcMax_panels.

#+INDEX: Subjects!Small multiples

#+begin_src R :results output graphics :exports both :file figs/pcMax_panels.pdf
ggplot(sfMapVotes) +
    geom_sf(aes(fill = pcMaxInt),
            color = "transparent") +
    ## Define the faceting using two rows
    facet_wrap(~whichMax, nrow = 2) +
    scale_fill_brewer(palette = "Oranges") +
    geom_sf(data = sfProvs,
            fill = 'transparent',
            size = 0.1,
            show.legend = FALSE) +
    theme_bw()
#+end_src

#+CAPTION: Small multiple choropleth maps of the Spanish general elections results. Each map shows the results of a political option in each municipality. label:fig:pcMax_panels
#+RESULTS:
[[file:figs/pcMax_panels.pdf]]

* Bivariate Map
label:sec:multiChoropleth
#+begin_src R :exports none
##################################################################
## Bivariate map
##################################################################
#+end_src

Following the inspiring example of the infographic from the /New York
Times/, we will combine the choropleth maps of both variables to
produce a bivariate map[fn:7]: the hue of each polygon will be determined
by the name of the predominant option (=whichMax=) but the
transparency will vary according to the percentage of votes (=pcMax=).

In previous sections, we use six intervals to represent the quantitative
variable =pcMax=. However, in this case we must reduce this number: in
order to improve the map legibility, each ramp has only three
steps. Thus, the bivariate legend will be composed of eighteen colors.

Next code creates a bidimensional palette with a loop that produces a
color ramp for each member of the qualitative palette. Each ramp
begins in the original color of the palette, and ends in a lighter
color with its transparency fixed to 40%. 

#+INDEX: Subjects!Sequential palette
#+INDEX: Subjects!Qualitative palette


#+begin_src R
## Number of intervals.
N <- 3
## Loop to create a bidimensional palette
multiPal <- sapply(1:nClasses, function(i)
{
    colorAlpha <- adjustcolor(qualPal[i], alpha = 0.4)
    colorRampPalette(c(qualPal[i], colorAlpha), alpha = TRUE)(N)
})
#+end_src

#+INDEX: Subjects!Class Intervals
#+INDEX: Packages!classInt@\texttt{classInt}

#+begin_src R
## Define the intervals
intFisher <- classIntervals(spMapVotes$pcMax,
                            n = N, style = "fisher")
## ... and create a categorical variable with them
spMapVotes$pcMaxInt <- cut(spMapVotes$pcMax,
                            breaks = intFisher$brks)
#+end_src

With this multivariate palette we can produce a list of maps
extracting the polygons according to each class of the qualitative
variable, and filling with the appropiate color from this palette. The
resulting list of =trellis= objects can be combined with =Reduce= and
the =+.trellis= function of the =latticeExtra= and produce a =trellis=
object.

#+begin_src R 
pList <- lapply(1:nClasses, function(i){
    ## Only those polygons corresponding to a level are selected
    mapClass <- subset(spMapVotes,
                       whichMax == classes[i])
    ## Palette
    pal <- multiPal[, i]
    ## Produce the graphic
    pClass <- spplot(mapClass, "pcMaxInt",
                     col.regions = pal,
                     col = 'transparent',
		     colorkey = FALSE)
})
names(pList) <- classes
p <- Reduce('+', pList)
#+end_src

#+begin_src R :exports none
op <- options(digits = 4)
tabFisher <- print(intFisher)
intervals <- names(tabFisher)
options(op)
#+end_src

The bidimensional legend of this graphic is produced with
=grid.raster=, a function of the =grid= package, able to display a
color matrix (line [[(gridRaster)]]). The axis of the color matrix are
created with =grid.text= (lines [[(gridTextX)]] and [[(gridTextY)]]).

#+INDEX: Packages!grid@\texttt{grid}

#+begin_src R -n -r
library("grid")

legend <- layer(
{
    ## Position of the legend
    x0 <- 1000000
    y0 <- 4200000
    ## Width of the legend 
    w <- 120000
    ## Height of the legend
    h <- 100000
    ## Colors
    grid.raster(multiPal, interpolate = FALSE,                (ref:gridRaster)
                      x = unit(x0, "native"),
                      y = unit(y0, "native"),
                width = unit(w, "native"),
                height = unit(h, "native"))
    ## x-axis (qualitative variable)
    grid.text(classes,                                        (ref:gridTextX)
              x = unit(seq(x0 - w * (nClasses -1)/(2*nClasses),
                           x0 + w * (nClasses -1)/(2*nClasses),
                           length = nClasses),
                       "native"),
              y = unit(y0 + h/2, "native"),
              just = "bottom",
              rot = 10,
              gp = gpar(fontsize = 4))
    ## y-axis (quantitative variable)
    Ni <- length(intervals)
    grid.text(intervals,                                      (ref:gridTextY)
              x = unit(x0 + w/2, "native"),
              y = unit(seq(y0 - h * (Ni -1)/(2*Ni),
                           y0 + h * (Ni -1)/(2*Ni),
                           length = Ni),
                       "native"),
              just = "left",
              gp = gpar(fontsize = 6))
})
#+end_src

#+RESULTS:

Figure ref:fig:mapLegends displays the result.

#+begin_src R :results output graphics :exports both :file figs/mapLegends.pdf
## Main plot
p + legend
#+end_src

#+CAPTION: Bidimensional choropleth map of the Spanish general elections results. The map shows the result of the most voted option in each municipality. label:fig:mapLegends
#+RESULTS:
[[file:figs/mapLegends.pdf]]

* Interactive Graphics
label:sec:interactive_choropleth
#+begin_src R :exports none  
##################################################################
## Interactive Graphics
##################################################################
#+end_src

#+INDEX: Subjects!Interactive visualization

The package =mapview= was used in section ref:sec:mapview_bubble to
produce interactive proportional symbol maps. In this section this package creates interactive choropleth maps. 

#+INDEX: Packages!mapview@\texttt{mapview}

#+begin_src R
library("mapview")
#+end_src

This package is able to work both with =sp= and with =sf=. In this section we use the =sf= package to read the data[fn:5]. 

#+begin_src R
sfMapVotes0 <- st_read("data/spMapVotes0.shp")
st_crs(sfMapVotes0) <- 25830
#+end_src

Figures ref:fig:mapview_pcMax and ref:fig:mapview_whichMax show the snapshots of the interactive choropleth maps of =pcMax= and =whichMax=, respectively. These maps are produced with the next code.

#+begin_src R
## Quantitative variable, pcMax
mapView(sfMapVotes0,
        zcol = "pcMax", ## Choose the variable to display
        legend = TRUE,
        col.regions = quantPal)
#+end_src

#+CAPTION: Snapshot of the interactive quantitative choropleth map produced with =mapview=. label:fig:mapview_pcMax
file:figs/mapview_pcMax.png

#+begin_src R
## Qualitative variable, whichMax
mapView(sfMapVotes0,
        zcol = "whichMax",
        legend = TRUE,
        col.regions = qualPal)
#+end_src

#+CAPTION: Snapshot of the interactive qualitative choropleth map produced with =mapview=. label:fig:mapview_whichMax
file:figs/mapview_whichMax.png

* Footnotes

[fn:8] The result is stored in the =data= folder, in a set of files
named =spMapVotes.*=. You can visit it for details if you are
interested in this procedure.

[fn:7] Although bivariate maps are generally used to display the relationship between two variables, they can also be used to display one variable and its uncertainty. More information about visualizing uncertainty with maps can be found in cite:Lucchesi.Wikle2017 and the package =VizU= (https://github.com/pkuhnert/VizU).

[fn:6] http://spatialreference.org/ref/epsg/etrs89-utm-zone-30n/

[fn:5] In previous sections the spatial object included a modification to the original shapefile in order to display the Canarian islands in the right bottom corner of the maps. This modification is not needed with =mapview=, so =st_read= imports the shapefile =spMapVotes0= (Section ref:sec:dataChoropleth).

[fn:4] The EPSG projection of the data is 25830, whose Proj4 definition is =+proj=utm +zone=30 +ellps=GRS80 +units=m +no_defs=. More information in http://spatialreference.org/ref/epsg/etrs89-utm-zone-30n/


[fn:2] A similar result is obtained with the function =layer= of the =latticeExtra= package. The section ref:sec:quantitative_raster includes examples of this method.

[fn:1] http://colorbrewer2.org

[fn:3] http://www.nytimes.com/interactive/2009/03/10/us/20090310-immigration-explorer.html



