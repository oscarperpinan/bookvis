#+PROPERTY: header-args :session *R* :cache yes :tangle ../docs/R/osm.R :eval no-export
#+OPTIONS: ^:nil
#+BIND: org-latex-image-default-height "0.45\\textheight"

#+begin_src R :exports none :tangle no
setwd('~/github/bookvis/')
#+end_src

#+begin_src R :exports none  
##################################################################
## Initial configuration
##################################################################
## Clone or download the repository and set the working directory
## with setwd to the folder where the repository is located.
#+end_src

* Reference maps
label:sec:reference

Although I was born in Madrid, Galicia (north of Spain) is a very
special region for me. More precisely, the Cedeira and Valdoviño
regions offer a wonderful combination of wild sea, secluded beaches,
and forests. I will show you a map of these marvelous places.

** Retrieving Data from OpenStreetMap
#+begin_src R :exports none
##################################################################
## Retrieving data from OpenStreetMap
##################################################################
#+end_src

The first step is to acquire information from the OpenStreetMap (OSM)
project. There are several packages to extract data from this service
but, while most of them only provide already rendered raster images,
the =osmdata= package[fn:6] enables the use of the raw data with
classes from the packages =sp= and =sf=.

=osmdata= obtains data from the overpass API[fn:2], a read-only API that
serves up custom selected parts of the OSM map data. The first step is
specifying the bounding box with the function =opq=:

#+INDEX: Data!OpenStreetMap
#+INDEX: Packages!osmdata@\texttt{osmdata}

#+begin_src R
library("osmdata")

## Bounding box
ymax <- 43.7
ymin <- 43.62
xmax <- -8
xmin <- -8.1
## Overpass query
cedeira <- opq(c(xmin, ymin, xmax, ymax))
#+end_src

Next, the query is completed adding the required features with
=add_osm_feature=. The three main arguments of this function are the
overpass query defined with =opq=, the feature =key=, and the =value=
of this feature. Finally, the information contained in the query can
be obtained as a =Spatial*= object with =osmdata_sp=, or as a =sf=
object with =osmdata_sf=. The result is a list with three components,
=osm_points=, =osm_lines=, and =osm_polygons=, containing the
respective spatial object. 

For example, the next code obtains the residential streets in the
region.

#+begin_src R :results output :exports both
streetsOSM <- add_osm_feature(cedeira,
                              key = "highway",
                              value = "residential")

streetsSP <- osmdata_sp(streetsOSM)

print(streetsSP)
#+end_src

#+RESULTS[da305a8c6159bf1c3386478d51a20e9e4d3c5c0b]:
: Object of class 'osmdata' with:
:                  $bbox : 43.6181,-8.0808,43.7031,-8.0224
:         $overpass_call : The call submitted to the overpass API
:             $timestamp : [ sáb 7 ene 2018 20:02:44 ]
:            $osm_points : 'sp' SpatialPointsDataFrame with 819 points
:             $osm_lines : 'sp' SpatialLinesDataFrame with 169 lines
:          $osm_polygons : 'sp' SpatialPolygonsDataFrame with 3 polygons
:        $osm_multilines : 'sp' SpatialNADataFrame with 0 multilines
:     $osm_multipolygons : 'sp' SpatialPolygonsDataFrame with 0 multipolygons


Because this procedure is to be repeated several times, I define a
wrapper function that provides a =SpatialLinesDataFrame= object or a
=SpatialPointsDataFrame= object depending on the value of its argument
=type=:

#+begin_src R
spFromOSM <- function(source, key, value, type = 'lines')
{
    osm <- add_osm_feature(source, key, value)
    spdata <- osmdata_sp(osm)
    switch(type,
           lines = spdata$osm_lines,
           points = spdata$osm_points)
}
#+end_src  

The next code uses this function to obtain the different types of
roads and streets in the region as =SpatialLinesDataFrame= objects.
#+begin_src R 
streets <- spFromOSM(cedeira, key = "highway", value = "residential")
primary <- spFromOSM(cedeira, key = "highway", value = "primary")
secondary <- spFromOSM(cedeira, key = "highway", value = "secondary")
tertiary <- spFromOSM(cedeira, key = "highway", value = "tertiary")
unclassified <- spFromOSM(cedeira, key = "highway", value = "unclassified")
footway <- spFromOSM(cedeira, key = "highway", value = "footway")
steps <- spFromOSM(cedeira, key = "highway", value = "steps")
#+end_src  

A similar procedure can be applied to construct a =SpatialPointsDataFrame=
object with the collection of places with name:

#+begin_src R 
city <- spFromOSM(cedeira, key = "place", value = "town", type = "points")
places <- spFromOSM(cedeira, key = "place", value = "hamlet", type = "points")

nms <- strsplit(as.character(places$name), split = ' \\(')
places$name <- sapply(nms, function(x) x[1])
#+end_src  

** Hill Shading
label:sec:hill-shading-osm
#+begin_src R :exports none
##################################################################
## Hill Shading
##################################################################
#+end_src

#+INDEX: Subjects!Hill shading

The second step is to produce layers to display the topography. A
suitable method is shaded relief or hill shading, previously exposed
in section ref:sec:hill-shading-raster.

The hill shade layer is computed from the slope and aspect layers
derived from a Digital Elevation Model. The DEM of Galicia is
available at the Geonetwork service of the Xunta de Galicia[fn:1]. I
have extracted the data corresponding to the region of interest using
=crop=, and the corresponding files are available at the =data= folder
of the book repository.

#+INDEX: Packages!raster@\texttt{raster}
#+INDEX: Packages!rasterVis@\texttt{rasterVis}
#+INDEX: Data!Geonetwork

#+begin_src R
library("raster")
library("rasterVis")

projCedeira <- projection(city)

demCedeira <- raster('data/demCedeira')
projection(demCedeira) <- projCedeira

## Crop the DEM using the bounding box of the OSM data
OSMextent <- extent(extendrange(c(xmin, xmax)),
                    extendrange(c(ymin, ymax)))
demCedeira <- crop(demCedeira, OSMextent)

## Discard values below sea level
demCedeira[demCedeira <= 0] <- NA
#+end_src

The =slope= and =aspect= layers are computed with the =terrain=
function, and the hill shade layer is derived with these layers for a
fixed sun position. 

#+begin_src R 
slope <- terrain(demCedeira, 'slope')
aspect <- terrain(demCedeira, 'aspect')
hsCedeira <- hillShade(slope = slope, aspect = aspect,
                       angle = 20, direction = 30)
#+end_src

** Overlaying Layers of Information
#+begin_src R :exports none
##################################################################
## Overlaying layers of information
##################################################################
#+end_src
And finally, the third step is to display the different layers of
information in correct order (Figure [[ref:fig:cedeiraOSM]]):

- The hill shade layer is created with the =levelplot= method for
  =Raster= objects defined in the =rasterVis= package. The =GrTheme=
  is modified to display the sea region with blue color.

#+begin_src R
## The background color of the panel is set to blue to represent the sea
hsTheme <- GrTheme(panel.background = list(col = 'skyblue3'))
#+end_src

- The DEM raster is printed with terrain colors and semitransparency
  over the hill shade layer.

#+begin_src R
library("colorspace")
## DEM with terrain colors and semitransparency
terrainTheme <- rasterTheme(region = terrain_hcl(n = 15), 
                            regions = list(alpha = 0.6))
#+end_src

- The places are represented with =sp.points= and labeled with the
  =sp.pointLabel= method, a modification of the =pointLabel= function
  for =base= graphics, both defined in the =maptools= package. These
  functions use optimization routines to find good locations for point
  labels without overlaps.

#+begin_src R
library("maptools")
#+end_src


- The roads are displayed with an auxiliary function (=sp.road=)
  that produces a colored line over a thicker black line. 

#+begin_src R
##Auxiliary function to display the roads. A thicker black line in
##the background and a thinner one with an appropiate color.
sp.road <- function(line, lwd = 6, blwd = 7,
                    col = 'indianred1', bcol = 'black'){
    sp.lines(line, lwd = blwd, col = bcol)
    sp.lines(line, lwd = lwd, col = col)
}
#+end_src


#+INDEX: Packages!maptools@\texttt{maptools}  
#+INDEX: Packages!sp@\texttt{sp}  
#+INDEX: Packages!latticeExtra@\texttt{latticeExtra}  
#+INDEX: Packages!colorspace@\texttt{colorspace}  
#+INDEX: Subjects!Label positioning

#+begin_src R :results output graphics :exports both :file figs/cedeiraOSM.pdf
## Hill shade and DEM overlaid
levelplot(hsCedeira, maxpixels = ncell(hsCedeira),
          par.settings = hsTheme,
          margin = FALSE, colorkey = FALSE,
          xlab = '', ylab = '') +
    levelplot(demCedeira, maxpixels = ncell(demCedeira),
              par.settings = terrainTheme) +
    ## Roads and places
    layer({
        ## Street and roads
        sp.road(streets, lwd = 1, blwd = 1, col = 'white')
        sp.road(unclassified, lwd = 2, blwd = 2, col = 'white')
        sp.road(footway, lwd = 2, blwd = 2, col = 'white')
        sp.road(steps, lwd = 2, blwd = 2, col = 'white')
        sp.road(tertiary, lwd = 4, blwd = 4, col = 'palegreen')
        sp.road(secondary, lwd = 6, blwd = 6, col = 'midnightblue')
        sp.road(primary, lwd = 7, blwd = 8, col = 'indianred1')
        ## Places except Cedeira town
        sp.points(places, pch = 19, col = 'black', cex = 0.4, alpha = 0.8)
        sp.pointLabel(places, labels = places$name,
                      fontfamily = 'Palatino', 
                      cex = 0.7, col = 'black')
        ## Cedeira town
        sp.points(city, pch = 18, col = 'black', cex = 1)
        sp.pointLabel(city, labels = 'Cedeira',
                      fontfamily = 'Palatino', 
                      cex = 1, col = 'black')
    })
#+end_src

#+CAPTION: Main roads near Cedeira, Galicia. Local topography is displayed with the hill shading technique. Some places are highlighted. label:fig:cedeiraOSM
#+RESULTS[e56f65b2af52f80027cb6de841cb295e583348f7]:
[[file:figs/cedeiraOSM.pdf]]

* Footnotes

[fn:2] http://www.overpass-api.de/

[fn:6] In the first edition of this book, this chapter was based on the =osmar= package. However, this package has not been updated since 2013. Moreover, the =osmdata= package provides an easier query syntax. 

[fn:1] http://xeocatalogo.xunta.es/geonetwork/srv/gl/main.home
