#+PROPERTY:  header-args :session *R* :tangle ../docs/R/dataSpatial.R :eval no-export
#+OPTIONS: ^:nil

#+begin_src R :exports none :tangle no
setwd('~/github/bookvis/')
#+end_src

#+begin_src R :exports none  
##################################################################
## Initial configuration
##################################################################
## Clone or download the repository and set the working directory
## with setwd to the folder where the repository is located.
#+end_src

* Air Quality in Madrid
\label{sec:airQualityData}

#+begin_src R :exports none
  ##################################################################
  ## Air Quality in Madrid
  ##################################################################
#+end_src

Air pollution is harmful to health and contributes to respiratory and
cardiac diseases, and has a negative impact on natural ecosystems,
agriculture, and the built environment. In Spain, the principal
pollutants are particulate matter (PM), tropospheric ozone, nitrogen
dioxide, and environmental noise[fn:1].

The surveillance system of the Integrated Air Quality system of the
Madrid City Council consists of twenty-four remote stations, equipped
with analyzers for gases ($NO_X$, CO, ozone, $BT_X$, HCs, $SO_2$) and
particles (PM10, PM2.5), which measure pollution in different areas of
the urban environment. In addition, many of the stations also include
sensors to provide meteorological data.


** Retrieve data
#+begin_src R :exports none
##################################################################
## Retrieve data
##################################################################
#+end_src

The detailed information of the network of measuring stations is
available at the Open Data portal of Madrid[fn:11]. The book
repository contains an clean version of this file:

#+begin_src R
airStations <- read.csv2("data/Spatial/airStations.csv")
head(airStations)
#+end_src

The air pollution data are available from the Madrid City Council
webpage[fn:2], and the structure of the file is documented in a pdf
document[fn:3]. The result after cleaning the data for the year 2016
is stored in the file =airQuality.csv=

#+begin_src R
airQuality <- read.csv2("data/Spatial/airQuality.csv")
head(airQuality)
#+end_src


** Combine Data and Spatial Locations
#+begin_src R :exports none
##################################################################
## Combine data and spatial locations
##################################################################
#+end_src
Our next step is to combine the data and spatial information. The
locations are contained in =airStations=, a =data.frame= that is
converted to an =SpatialPointsDataFrame= object with the =coordinates=
method.


#+INDEX: Data!Air quality in Madrid
#+INDEX: Packages!sf@\texttt{sf}

#+begin_src R 
library("sf")
  
## Spatial location of stations
airStations <- st_as_sf(airStations,
                        coords = c("long", "lat"),
                        crs = 4326)
#+end_src

#+RESULTS:

On the other hand, the =airQuality= =data.frame= comprises the air
quality daily measurements. We will retain only the $NO_2$ time
series, and represent each station with aggregated values (mean,
median, and standard deviation) computed with =aggregate=:

#+begin_src R
NO2 <- subset(airQuality, codParam == 8)

NO2agg <- aggregate(dat ~ codEst, data = NO2,
                    FUN = function(x) {
                      c(mean = signif(mean(x), 3),
                        median = median(x),
                        sd = signif(sd(x), 3))
                    })
NO2agg <- do.call(cbind, NO2agg)
NO2agg <- as.data.frame(NO2agg)
#+end_src

The aggregated values (a =data.frame=) and the spatial information (a
=sf= object) are combined with the =cbind= method of the =sf=
package. Previously, the =data.frame= is reordered by matching against
the shared key column (=airStations$Code= and =NO2agg$codEst=):

#+begin_src R
## Link aggregated data with stations to obtain a sf object
## Code and codEst are the stations codes
idxNO2 <- match(airStations$Code, NO2agg$codEst)
NO2sf <- cbind(airStations[, c("Name", "alt")],
               NO2agg[idxNO2, ])

## Save the result
st_write(NO2sf, dsn = "data/Spatial/", layer = "NO2sf",
         driver = "ESRI Shapefile")
#+end_src

* Spanish General Elections
label:sec:dataChoropleth

#+begin_src R :exports none
##################################################################
## Spanish General Elections
##################################################################
#+end_src

The results of the 2016 Spanish general elections[fn:9] are
available from the Ministry webpage[fn:10] and at the =data= folder of
the book repository. Each region of the map will represent the
percentage of votes (=pcMax=) obtained by the predominant political
option (=whichMax=) at the corresponding municipality.  Only six
groups are considered: the four main parties (=PP=, =PSOE=, =UP=,
=Cs=), the abstention results (=ABS=), and the remaining parties
(=OTH=). Each region will be identified by the =PROVMUN= code.

#+INDEX: Data!INE
#+INDEX: Data!Spanish General Elections
#+INDEX: Subjects!Data processing and cleaning

#+begin_src R 
dat2016 <- read.csv("data/Spatial/GeneralSpanishElections2016.csv")

census <- dat2016$Total.censo.electoral
validVotes <- dat2016$Votos.válidos
## Election results per political party and municipality
votesData <- dat2016[, -(1:13)]
## Abstention as an additional party
votesData$ABS <- census - validVotes
## UP is a coalition of several parties
UPcols <- grep("PODEMOS|ECP", names(votesData))
votesData$UP <- rowSums(votesData[, UPcols])
votesData[, UPcols] <- NULL
## Winner party at each municipality
whichMax <- apply(votesData,  1, function(x)names(votesData)[which.max(x)])
## Results of the winner party at each municipality
Max <- apply(votesData, 1, max)
## OTH for everything but PP, PSOE, UP, Cs, and ABS
whichMax[!(whichMax %in% c("PP", "PSOE", "UP", "C.s", "ABS"))] <- "OTH"
## Percentage of votes with the electoral census
pcMax <- Max/census * 100

## Province-Municipality code. sprintf formats a number with leading zeros.
PROVMUN <- with(dat2016, paste(sprintf("%02d", Código.de.Provincia),
                               sprintf("%03d", Código.de.Municipio),
                               sep=""))

votes2016 <- data.frame(PROVMUN, whichMax, Max, pcMax)
write.csv(votes2016, "data/Spatial/votes2016.csv", row.names = FALSE)
#+end_src

#+begin_src R :results output :exports results :tangle no
votes2016 <- read.csv("data/Spatial/votes2016.csv",
                      colClasses = c("factor", "factor", "numeric", "numeric"))

summary(votes2016)
#+end_src

#+RESULTS:
:     PROVMUN     whichMax         Max             pcMax      
:  01001  :   1   ABS :2817   Min.   :     2   Min.   :21.33  
:  01002  :   1   C.s :   3   1st Qu.:    54   1st Qu.:31.69  
:  01003  :   1   OTH : 170   Median :   162   Median :35.64  
:  01004  :   1   PP  :4214   Mean   :  1394   Mean   :37.58  
:  01006  :   1   PSOE: 783   3rd Qu.:   637   3rd Qu.:41.25  
:  01008  :   1   UP  : 138   Max.   :696804   Max.   :94.74  
:  (Other):8119


** Administrative Boundaries

#+begin_src R :exports none
##################################################################
## Administrative boundaries
##################################################################
#+end_src

The Spanish administrative boundaries are available as shapefiles at
the INE (Instituto Nacional de Estadística) webpage[fn:7]. Both the
municipalities, =spMap=, and province boundaries, =provinces=, are
read with =st_read= of the =sf= package.


#+INDEX: Packages!sf@\texttt{sf}

#+begin_src R
library("sf")
#+end_src


#+INDEX: Data!INE

#+begin_src R :eval no-export
old <- setwd(tempdir())

download.file("https://www.ine.es/pcaxis/mapas_completo_municipal.zip",
              "mapas_completo_municipal.zip")
unzip("mapas_completo_municipal.zip")

sfMap <- st_read("esp_muni_0109.shp", crs = 25830,
                 stringsAsFactors = TRUE)
sfMap <- subset(sfMap, !is.na(sfMap$PROVMUN))

setwd(old)
#+end_src

Some of the polygons are repeated and can be dissolved with
=unionSpatialPolygons= (the =rgeos= package must be installed).

#+begin_src R 
## dissolve repeated polygons
spPols <- unionSpatialPolygons(spMap, spMap$PROVMUN) 
#+end_src

The main step is to link the data with the polygons. The =ID= slot of
each polygon is the key to find the correspondent registry in the
=votes2016= dataset.
#+begin_src R
votes2016 <- read.csv("data/Spatial/votes2016.csv",
                      colClasses = c("factor", "factor", "numeric", "numeric"))

## Match polygons and data 
idx <- match(sfMap$PROVMUN, votes2016$PROVMUN)
  
##Places without information
idxNA <- which(is.na(idx))

##Information to be added to the sf object
dat2add <- votes2016[idx, c("whichMax", "Max", "pcMax")]

## Spatial object with votes data
sfMapVotes <- cbind(sfMap, dat2add)

## Drop those places without information
sfMapVotes0 <- sfMapVotes[-idxNA, ]

## Save the result
st_write(sfMapVotes0, "data/Spatial/sfMapVotes0.shp")
#+end_src

Finally, Spanish maps are commonly displayed with the Canarian islands next
to the peninsula. First we have to extract the polygons of the
islands and the polygons of the peninsula, and then shift the
coordinates of the islands with =elide=. Finally, a new
=SpatialPolygons= object binds the shifted islands with the
peninsula.

#+begin_src R
## Extract Canarias islands from the sf object
canarias <-  substr(sfMapVotes0$PROVMUN, 1, 2) %in% c("35",  "38")
peninsula <- sfMapVotes0[!canarias,]
island <- sfMapVotes0[canarias,]

## Shift the island extent box to position them at the bottom right corner
dbbox <- st_bbox(peninsula) - st_bbox(island)
dxy <- dbbox[c("xmax", "ymin")]
island$geometry <- island$geometry + dxy

## Bind Peninsula (without islands) with shifted islands
st_crs(island) <- st_crs(peninsula)
sfMapVotes <- rbind(peninsula, island)

## Save the result
st_write(sfMapVotes, "data/Spatial/sfMapVotes.shp")
#+end_src

* CM SAF
\label{sec:CMSAF}

#+begin_src R :exports none
  ##################################################################
  ## CM SAF
  ##################################################################
#+end_src

The Satellite Application Facility on Climate Monitoring (CM SAF) is a
joint venture of the Royal Netherlands Meteorological Institute, the
Swedish Meteorological and Hydrological Institute, the Royal
Meteorological Institute of Belgium, the Finnish Meteorological
Institute, the Deutscher Wetterdienst, Meteoswiss, and the UK
MetOffice, along with collaboration of the European Organization for
the Exploitation of Meteorological Satellites (EUMETSAT)
\cite{CMSAF}. The CM-SAF was funded in 1992 to generate and store
monthly and daily averages of meteorological data measured in a
continuous way with a spatial resolution of $\ang{0.03}$ (15
kilometers). The CM SAF provides two categories of data: operational
products and climate data. The operational products are built on data
that are validated with on-ground stations and then is provided in
near-real-time to develop variability studies in diurnal and seasonal
time scales. However, climate data are long-term data series to assess
inter-annual variability \cite{Posselt.Mueller.ea2012}.

\nomenclature{CM-SAF}{Satellite Application Facility on Climate Monitoring.}
\nomenclature{SIS}{Shortwave incoming solar radiation.}

In this chapter we will display the annual average of the shortwave
incoming solar radiation product (SIS) incident over Spain during
2008, computed from the monthly means of this variable. SIS collates
shortwave radiation ($0.2$ to $\SI{4}{\micro\meter}$ wavelength range)
reaching a horizontal unit Earth surface obtained by processing
information from geostationary satellites (METEOSAT) and also from
polar satellites (MetOp and NOAA) \cite{Schulz.Albert.ea2009} and then
validated with high-quality on-ground measurements from the Baseline
Surface Radiation Network (BSRN)[fn:4].

The monthly means of SIS are available upon request from the CM SAF
webpage \cite{Posselt.Muller.ea2011} and at the =data= folder of the
book repository. Data from CM-SAF is published as raster files using
the NetCDF format. The =raster= package provides the =stack= function
to read a set of files and create a =RasterStack= object, where each
layer stores the content of a file. Therefore, the twelve raster files
of monthly averages produce a =RasterStack= with twelve layers.

\nomenclature{NetCDF}{Network Common Data Form, a set of software libraries and self-describing, machine-independent data formats that support the creation, access, and sharing of array-oriented scientific data.}
#+INDEX: Data!CM SAF
#+INDEX: Data!Solar radiation
#+INDEX: Subjects!Data processing and cleaning

#+INDEX: Packages!raster@\texttt{raster}

#+begin_src R
library("raster")
  
tmp <- tempdir()
unzip("data/Spatial/SISmm2008_CMSAF.zip", exdir = tmp)
filesCMSAF <- dir(tmp, pattern = "SISmm")
SISmm <- stack(paste(tmp, filesCMSAF, sep = "/"))
## CM-SAF data is average daily irradiance (W/m2). Multiply by 24
## hours to obtain daily irradiation (Wh/m2)
SISmm <- SISmm * 24
#+end_src

The =RasterLayer= object with annual averages is computed from the
monthly means and stored as a NetCDF file.
#+begin_src R 
## Monthly irradiation: each month by the corresponding number of days
daysMonth <- c(31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)
SISm <- SISmm * daysMonth / 1000 ## kWh/m2
## Annual average
SISav <- sum(SISm)/sum(daysMonth)
writeRaster(SISav, file = "data/Spatial/SISav.nc")
#+end_src


* Land Cover and Population Rasters

The NASA's Earth Observing System (EOS)[fn:5] is a coordinated series
of polar-orbiting and low-inclination satellites for long-term global
observations of the land surface, biosphere, solid Earth, atmosphere,
and oceans. NEO-NASA[fn:6], one of projects included in EOS, provides
a repository of global data imagery. We use the population density and
land cover classification rasters. Both rasters must be downloaded
from their respective webpages as Geo-TIFF files.

\nomenclature{NEO-NASA}{NASA Earth Observations, part of the NASA’s Earth Observing System (EOS).}
\nomenclature{Geo-TIFF}{A public domain metadata standard which allows georeferencing information to be embedded within a TIFF file.}
\nomenclature{TIFF}{Tagged Image File Format, a computer file format for storing raster graphics images.}

#+INDEX: Data!Population density
#+INDEX: Data!Land cover

#+begin_src R
library("raster")
## https://neo.gsfc.nasa.gov/view.php?datasetId=SEDAC_POP
pop <- raster("data/Spatial/875430rgb-167772161.0.FLOAT.TIFF")
## https://neo.gsfc.nasa.gov/view.php?datasetId=MCD12C1_T1
landClass <- raster("data/Spatial/241243rgb-167772161.0.TIFF")
#+end_src


* Footnotes
[fn:11] The Open Data portal is https://datos.madrid.es/. The information of the measuring stations is available at https://datos.madrid.es/egob/catalogo/212629-1-estaciones-control-aire.csv. 

[fn:8] http://www.mambiente.munimadrid.es/opencms/opencms/calaire/SistemaIntegral/SistVigilancia/Estaciones/


[fn:7] http://www.ine.es/ > Products and services > Publications > Download the PC-Axis program > Municipal maps

[fn:1] http://www.eea.europa.eu/soer/countries/es/

[fn:2] Use the search tool with the text "Calidad del aire. Datos diarios desde 2001".
[fn:3] https://datos.madrid.es/FWProjects/egob/Catalogo/MedioAmbiente/Aire/Ficheros/Interprete_ficheros_%20calidad_%20del_%20aire_global.pdf

[fn:4] http://www.bsrn.awi.de/en/home/

[fn:5] http://eospso.gsfc.nasa.gov/

[fn:6] https://neo.gsfc.nasa.gov/

[fn:9] https://en.wikipedia.org/wiki/Spanish_general_election,_2016

[fn:10] https://infoelectoral.interior.gob.es/es/elecciones-celebradas/area-de-descargas/



