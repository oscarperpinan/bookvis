#+PROPERTY:  header-args :session *R* :tangle ../docs/R/timeComplementary.R :eval no-export
#+OPTIONS: ^:nil
#+BIND: org-export-latex-image-default-option "height=0.45\\textheight"

#+begin_src R :exports none :tangle no
setwd('~/github/bookvis')
#+end_src

#+begin_src R :exports none  
##################################################################
## Initial configuration
##################################################################
## Clone or download the repository and set the working directory
## with setwd to the folder where the repository is located.
 
library("lattice")
library("ggplot2")
## latticeExtra must be loaded after ggplot2 to prevent masking of its
## `layer` function.
library("latticeExtra")

source('configLattice.R')
##################################################################
#+end_src

* Polylines
#+begin_src R :exports none
##################################################################
## Polylines
##################################################################
#+end_src

#+INDEX: Packages!zoo@\texttt{zoo}
#+INDEX: Data!CO2@$CO_2$
#+INDEX: Data!World Bank Open Data
#+INDEX: Data!Gross National Income

Our first approach is to display the entire data in a panel with a
scatterplot using country names as the grouping factor. Points of each
country are connected with polylines to reveal the time evolution
(Figure ref:fig:CO2-GNI).

#+begin_src R
library("zoo")

load('data/TimeSeries/CO2.RData')
#+end_src


#+begin_src R :results output graphics file :exports both :file "figs/TimeSeries/CO2_GNI.pdf" 
## lattice version
xyplot(GNI.capita  ~ CO2.capita, data = CO2data,
       xlab = "Carbon dioxide emissions (metric tons per capita)",
       ylab = "GNI per capita, PPP (current international $)",
       groups = Country.Name, type = 'b')
#+end_src

#+CAPTION: GNI per capita versus $\mathrm{CO_2}$ emissions per capita (=lattice= version). label:fig:CO2-GNI
#+RESULTS:
[[file:figs/TimeSeries/CO2_GNI.pdf]]

#+begin_src R :eval no-export
## ggplot2 version
ggplot(data = CO2data, aes(x = CO2.capita, y = GNI.capita,
                         color = Country.Name)) +
    xlab("Carbon dioxide emissions (metric tons per capita)") +
    ylab("GNI per capita, PPP (current international $)") +
    geom_point() + geom_path() + theme_bw()
#+end_src

Three improvements can be added to this graphical result: 
1. Define a better palette to enhance visual discrimination between
   countries.
2. Display time information with labels to show year values.
3. Label each polyline with the country name instead of a legend.
 
** Choosing Colors
 #+begin_src R :exports none
##################################################################
## Choosing colors
##################################################################
 #+end_src

The =Country.Name= categorical variable will be encoded with a
qualitative palette, namely the first five colors of =Set1=
palette[fn:2] from the =RColorBrewer= package
cite:Neuwirth2014. Because there are more countries than colors, we
have to repeat some colors to complete the number of levels of the
variable =Country.Name=. The result is a palette with non-unique
colors, and thus some countries will share the same color. This is not
a problem because the curves will be labeled, and countries with the
same color will be displayed at enough distance.

#+INDEX: Packages!RColorBrewer@\texttt{RColorBrewer}
#+INDEX: Subjects!Qualitative palette
#+INDEX: Subjects!Visual discrimination

#+begin_src R 
library("RColorBrewer")

nCountries <- nlevels(CO2data$Country.Name)
pal <- brewer.pal(n = 5, 'Set1')
pal <- rep(pal, length = nCountries)
#+end_src


Adjacent colors of this palette are chosen to be easily
distinguishable. Therefore, the connection between colors and
countries must be in such a way that nearby lines are encoded
with adjacent colors of the palette.

A simple approach is to calculate the annual average of the
variable to be represented along the x-axis (=CO2.capita=), and
extract colors from the palette according to the order of this
value.  


#+begin_src R 
## Rank of average values of CO2 per capita
CO2mean <- aggregate(CO2.capita ~ Country.Name,
                     data = CO2data, FUN = mean)
palOrdered <- pal[rank(CO2mean$CO2.capita)]  
#+end_src

A more sophisticated solution is to use the ordered results of a
hierarchical clustering of the time evolution of the $\mathrm{CO_2}$ per capita
values (Figure ref:fig:hclustCO2). The data is extracted from the
original $\mathrm{CO_2}$ =data.frame=.  

#+INDEX: Packages!reshape2@\texttt{reshape2}

#+begin_src R :results output :exports both
library("reshape2")

CO2capita <- CO2data[, c('Country.Name',
                         'Year',
                         'CO2.capita')]
CO2capita <- dcast(CO2capita, Country.Name ~ Year)

summary(CO2capita)
#+end_src

#+ATTR_LATEX: :environment results
#+RESULTS:
#+begin_example
Using CO2.capita as value column: use value.var to override.
  Country.Name      2000              2001              2002        
 Brazil :1     Min.   : 0.9799   Min.   : 0.9717   Min.   : 0.9674  
 China  :1     1st Qu.: 3.5093   1st Qu.: 3.5949   1st Qu.: 3.7725  
 Finland:1     Median : 7.8681   Median : 7.9634   Median : 7.9849  
 France :1     Mean   : 7.6468   Mean   : 7.7977   Mean   : 7.7982  
 Germany:1     3rd Qu.: 9.7802   3rd Qu.:10.0960   3rd Qu.: 9.6920  
 Greece :1     Max.   :20.1788   Max.   :19.6365   Max.   :19.6134  
 (Other):4                                                          
      2003              2004             2005             2006       
 Min.   : 0.9924   Min.   : 1.025   Min.   : 1.069   Min.   : 1.122  
 1st Qu.: 4.1721   1st Qu.: 4.559   1st Qu.: 4.917   1st Qu.: 5.212  
 Median : 8.1860   Median : 8.388   Median : 8.539   Median : 8.356  
 Mean   : 8.1468   Mean   : 8.146   Mean   : 7.948   Mean   : 8.163  
 3rd Qu.: 9.9536   3rd Qu.: 9.746   3rd Qu.: 9.545   3rd Qu.: 9.808  
 Max.   :19.5641   Max.   :19.658   Max.   :19.592   Max.   :19.094  
                                                                     
      2007             2008             2009             2010       
 Min.   : 1.193   Min.   : 1.310   Min.   : 1.432   Min.   : 1.397  
 1st Qu.: 5.443   1st Qu.: 5.693   1st Qu.: 5.581   1st Qu.: 5.526  
 Median : 8.407   Median : 7.914   Median : 7.247   Median : 7.050  
 Mean   : 8.139   Mean   : 8.082   Mean   : 7.665   Mean   : 7.947  
 3rd Qu.: 9.553   3rd Qu.:10.354   3rd Qu.: 9.671   3rd Qu.:11.001  
 Max.   :19.218   Max.   :18.462   Max.   :17.158   Max.   :17.442  
                                                                    
      2011             2012             2013             2014       
 Min.   : 1.477   Min.   : 1.598   Min.   : 1.591   Min.   : 1.730  
 1st Qu.: 5.255   1st Qu.: 5.222   1st Qu.: 5.068   1st Qu.: 4.688  
 Median : 7.216   Median : 7.336   Median : 6.947   Median : 6.862  
 Mean   : 7.475   Mean   : 7.387   Mean   : 7.396   Mean   : 7.097  
 3rd Qu.: 9.125   3rd Qu.: 9.168   3rd Qu.: 9.213   3rd Qu.: 8.832  
 Max.   :16.972   Max.   :16.304   Max.   :16.316   Max.   :16.494
#+end_example


#+begin_src R :results output graphics file :exports both :file "figs/TimeSeries/hclust.pdf" 
hCO2 <- hclust(dist(CO2capita[, -1]))

oldpar <- par(mar = c(0, 2, 0, 0) + .1)
plot(hCO2, labels = CO2capita$Country.Name,
     xlab = '', ylab = '', sub = '', main = '')
par(oldpar)
#+end_src

#+CAPTION: Hierarchical clustering of the time evolution of $\mathrm{CO_2}$ per capita values. label:fig:hclustCO2
#+ATTR_LATEX: :height 0.3\textheight
#+RESULTS:
[[file:figs/TimeSeries/hclust.pdf]]


The colors of the palette are assigned to each country with =match=,
which returns a vector of the positions of the matches of the country
names in alphabetical order in the country names ordered according to
the hierarchical clustering.
#+begin_src R 
idx <- match(levels(CO2data$Country.Name), 
             CO2capita$Country.Name[hCO2$order])
palOrdered <- pal[idx]  
#+end_src

It must be highlighted that this palette links colors with the levels
of =Country.Name= (country names in alphabetical order), which is
exactly what the =groups= argument provides. The following code
produces a curve for each country using different colors to
distinguish them.

#+begin_src R
## simpleTheme encapsulates the palette in a new theme for xyplot
myTheme <- simpleTheme(pch = 19, cex = 0.6, col = palOrdered)
#+end_src

#+begin_src R 
## lattice version
pCO2.capita <- xyplot(GNI.capita  ~ CO2.capita,
                      data = CO2data,
                      xlab = "Carbon dioxide emissions (metric tons per capita)",
                      ylab = "GNI per capita, PPP (current international $)",
                      groups = Country.Name,
                      par.settings = myTheme,
                      type = 'b')
#+end_src

#+begin_src R 
## ggplot2 version
gCO2.capita <- ggplot(data = CO2data,
                      aes(x = CO2.capita,
                          y = GNI.capita,
                          color = Country.Name)) +
    geom_point() + geom_path() +
    scale_color_manual(values = palOrdered, guide = "none") +
    xlab('CO2 emissions (metric tons per capita)') +
    ylab('GNI per capita, PPP (current international $)') +
    theme_bw()
#+end_src

** Labels to Show Time Information
 #+begin_src R :exports none
##################################################################
## Labels to show time information
##################################################################
 #+end_src
This result can be improved with labels displaying the years to show
the time evolution.  A panel function with =panel.text= to print the
year labels and =panel.superpose= to display the lines for each group
is a solution. In the panel function, =subscripts= is a vector with
the integer indices representing the rows of the =data.frame= to be
displayed in the panel.

#+INDEX: Subjects!Panel function

#+begin_src R :eval no-export
xyplot(GNI.capita  ~ CO2.capita,
       data = CO2data,
       xlab = "Carbon dioxide emissions (metric tons per capita)",
       ylab = "GNI per capita, PPP (current international $)",
       groups = Country.Name,
       par.settings = myTheme,
       type = 'b',
       panel = function(x, y, ..., subscripts, groups){
           panel.text(x, y, ...,
                      labels = CO2data$Year[subscripts],
                      pos = 2, cex = 0.5, col = 'gray')
           panel.superpose(x, y, subscripts, groups,...)
       })
#+end_src

The same result with a clearer code is obtained with the combination
of =+.trellis=, =glayer_= and =panel.text=. Using =glayer_= instead of
=glayer=, we ensure that the labels are printed below the lines.

#+INDEX: Packages!latticeExtra@\texttt{latticeExtra}

#+begin_src R
## lattice version
pCO2.capita <- pCO2.capita +
    glayer_(panel.text(...,
                       labels = CO2data$Year[subscripts],
                         pos = 2, cex = 0.5, col = 'gray'))
#+end_src

#+RESULTS:

#+begin_src R 
## ggplot2 version
gCO2.capita <- gCO2.capita + geom_text(aes(label = Year),
                                       colour = 'gray',
                                       size = 2.5,
                                       hjust = 0, vjust = 0)
  
#+end_src

#+RESULTS:

** Country Names: Positioning Labels
 #+begin_src R :exports none
##################################################################
## Country names: positioning labels
##################################################################
 #+end_src

The common solution to link each curve with the group value is to add
a legend. However, a legend can be confusing with too many items. In
addition, the reader must carry out a complex task: Choose the line,
memorize its color, search for it in the legend, and read the country
name.

#+INDEX: Subjects!Label positioning

A better approach is to label each line using nearby text with the
same color encoding. A suitable method is to place the labels avoiding
the overlapping between labels and lines. The package =directlabels=
cite:Hocking2017 includes a wide repertory of positioning methods to
cope with overlapping. The main function, =direct.label=, is able to
determine a suitable method for each plot, although the user can
choose a different method from the collection or even define a custom
method. For the =pCO2.capita= object, the best results are obtained
with =extreme.grid= (Figure ref:fig:CO2-GNI-DL).

#+INDEX: Packages!directlabels@\texttt{directlabels}

#+begin_src R :results output graphics file :exports both :file "figs/TimeSeries/CO2_capitaDL.pdf"
library("directlabels")

## lattice version
direct.label(pCO2.capita,
             method = 'extreme.grid')
#+end_src

#+CAPTION: $\mathrm{CO_2}$ emissions versus GNI per capita. Labels are placed with the \texttt{extreme.grid} method of the \texttt{directlabels} package. label:fig:CO2-GNI-DL 
#+RESULTS:
 [[file:figs/TimeSeries/CO2_capitaDL.pdf]]

#+begin_src R 
## ggplot2 version
direct.label(gCO2.capita, method = 'extreme.grid')
#+end_src

* A Panel for Each Year
#+begin_src R :exports none
##################################################################
## A panel for each year
##################################################################
#+end_src

Time can be used as a conditioning variable (as shown in previous
sections) to display subsets of the data in different panels. Figure
ref:fig:CO2-GNI-panel is produced with the same code as in Figure
ref:fig:CO2-GNI, now including =|factor(Year)= in the lattice
version and =facet_wrap(~ Year)= in the =ggplot2= version.

#+INDEX: Subjects!Small multiples

#+begin_src R :results output graphics file :exports both :file "figs/TimeSeries/CO2_capita_panel.pdf"
## lattice version
xyplot(GNI.capita  ~ CO2.capita | factor(Year),
       data = CO2data,
       xlab = "Carbon dioxide emissions (metric tons per capita)",
       ylab = "GNI per capita, PPP (current international $)",
       groups = Country.Name, type = 'p',
       auto.key = list(space = 'right'))
#+end_src

#+CAPTION: $\mathrm{CO_2}$ emissions versus GNI per capita with a panel for each year. label:fig:CO2-GNI-panel
#+RESULTS:
[[file:figs/TimeSeries/CO2_capita_panel.pdf]]

#+begin_src R :eval no-export
## ggplot2 version
ggplot(data = CO2data,
       aes(x = CO2.capita,
           y = GNI.capita,
           colour = Country.Name)) +
    facet_wrap(~ Year) + geom_point(pch = 19) + 
    xlab('CO2 emissions (metric tons per capita)') +
    ylab('GNI per capita, PPP (current international $)') +
    theme_bw()
#+end_src

Because the grouping variable, =Country.Name=, has many levels, the
legend is not very useful. Once again, point labeling is recommended
(Figure ref:fig:CO2-GNI-panel-labels).

#+INDEX: Subjects!Label positioning

#+begin_src R :results output graphics file :exports both :file "figs/TimeSeries/CO2_capita_panel_labels.pdf"
## lattice version
pl <- xyplot(GNI.capita  ~ CO2.capita | factor(Year),
            data = CO2data,
            xlab = "Carbon dioxide emissions (metric tons per capita)",
            ylab = "GNI per capita, PPP (current international $)",
            groups = Country.Name, type = 'b',
            par.settings = myTheme)

## Extracted from the qp.labels help page
dlmethod <- list("first.points",
                 cex = 0.5,
                 "calc.boxes",
                 "enlarge.box",
                 qp.labels("y","bottom","top"))
direct.label(pl, dlmethod)
#+end_src

#+CAPTION: $\mathrm{CO_2}$ emissions versus GNI per capita with a panel for each year. label:fig:CO2-GNI-panel-labels
#+RESULTS:
[[file:figs/TimeSeries/CO2_capita_panel_labels.pdf]]

#+begin_src R :eval no-export
## ggplot2 version
pg <- ggplot(data = CO2data,
             aes(x = CO2.capita,
                 y = GNI.capita,
                 colour = Country.Name)) +
  facet_wrap(~ Year) + geom_point(pch = 19) + 
  scale_color_manual(values = palOrdered, guide = "none") +
  xlab('CO2 emissions (metric tons per capita)') +
  ylab('GNI per capita, PPP (current international $)') +
  theme_bw()

direct.label(pg, dlmethod)
#+end_src

** \floweroneleft Using Variable Size to Encode an Additional Variable
#+begin_src R :exports none
##################################################################
## Using variable size to encode an additional variable
##################################################################
#+end_src
Instead of using simple points, we can display circles of
different radius to encode a new variable. This new variable is
=CO2.PPP=, the ratio of $\mathrm{CO_2}$ emissions to the Gross Domestic
Product with purchasing power parity (PPP) estimations.

To use this numeric variable as an additional grouping factor, its range must be divided into different classes. The typical solution is to use =cut= to coerce the numeric variable into a =factor= whose levels correspond to uniform intervals, which could be unrelated to the data distribution. The =classInt= package cite:Bivand2017 provides several methods to partition data into classes based on natural groups in the data distribution.

#+INDEX: Packages!classInt@\texttt{classInt}
#+INDEX: Subjects!Class Intervals

#+begin_src R 
library("classInt")
z <- CO2data$CO2.PPP
intervals <- classIntervals(z, n = 4, style = 'fisher')
#+end_src

#+RESULTS:

Although the functions of this package are mainly intended to create color palettes for maps, the results can also be associated to point sizes. =cex.key= defines the sequence of sizes (to be displayed in the legend) associated with each =CO2.PPP= using the =findCols= function.

#+begin_src R 
nInt <- length(intervals$brks) - 1
cex.key <- seq(0.5, 1.8, length = nInt)

idx <- findCols(intervals)
CO2data$cexPoints <- cex.key[idx]
#+end_src

The graphic will display information on two variables (=GNI.capita= and =CO2.capita= in the vertical and horizontal axes, respectively) with a conditioning variable (=Year=) and two grouping variables (=Country.Name=, and =CO2.PPP= through =cexPoints=) (Figure ref:fig:CO2pointsGG).

#+begin_src R :results output graphics file :exports both :file "figs/TimeSeries/CO2pointsGG.pdf" 
ggplot(data = CO2data,
       aes(x = CO2.capita,
           y = GNI.capita,
           colour = Country.Name)) +
    facet_wrap(~ Year) +
    geom_point(aes(size = cexPoints), pch = 19) +
    xlab('Carbon dioxide emissions (metric tons per capita)') +
    ylab('GNI per capita, PPP (current international $)') +
    theme_bw()
#+end_src

#+CAPTION: $\mathrm{CO_2}$ emissions versus GNI per capita for different intervals of the ratio of $\mathrm{CO_2}$ emissions to the GDP PPP estimations. label:fig:CO2pointsGG
#+RESULTS:
[[file:figs/TimeSeries/CO2pointsGG.pdf]]

The =auto.key= mechanism of the =lattice= version is not able to cope with two grouping variables. Therefore, the legend, whose main componens are the labels (=intervals=) and the point sizes (=cex.key=), must be defined manually (Figure ref:fig:CO2points). 
#+begin_src R
op <- options(digits = 2)
tab <- print(intervals)
options(op)
#+end_src

#+begin_src R
key <- list(space = 'right',
            title = expression(CO[2]/GNI.PPP),
            cex.title = 1,
            ## Labels of the key are the intervals strings
            text = list(labels = names(tab), cex = 0.85),
            ## Points sizes are defined with cex.key
            points = list(col = 'black', 
                          pch = 19,
                          cex = cex.key,
                          alpha = 0.7)
            )
#+end_src

#+begin_src R :results output graphics file :exports both :file "figs/TimeSeries/CO2points.pdf" 
pl2 <- xyplot(GNI.capita ~ CO2.capita|factor(Year), data = CO2data,
              xlab = "Carbon dioxide emissions (metric tons per capita)",
              ylab = "GNI per capita, PPP (current international $)",
              groups = Country.Name,
              alpha = 0.7,
              panel  =  panel.superpose,
              panel.groups  =  function(x, y,
                                        subscripts, group.number, group.value, ...){
                panel.xyplot(x, y,
                             col  =  palOrdered[group.number],
                             cex  =  CO2data$cexPoints[subscripts])
              })
## Add labels...
plLabel <- direct.label(pl2, "dlmethod")
## ... and the key (after the call to direct.labels because this
## function removes the legend)
update(plLabel, key = key)
#+end_src

#+CAPTION: $\mathrm{CO_2}$ emissions versus GNI per capita for different intervals of the ratio of $\mathrm{CO_2}$ emissions to the GDP PPP estimations. label:fig:CO2points 
#+RESULTS:
[[file:figs/TimeSeries/CO2points.pdf]]

* Interactive Graphics: Animation label:sec:timeseries_animation

Previous sections have been focused on static graphics. This section
describes several solutions to display the data through animation with
interactive functionalities. 

Gapminder [fn:5] is an independent foundation based in Stockholm,
Sweden.  Its mission is "to debunk devastating myths about the world
by offering free access to a fact-based world view." They provide free
online tools, data, and videos "to better understand the changing
world." The initial development of Gapminder was the Trendalyzer
software, used by Hans Rosling in several sequences of his documentary
"The Joy of Stats."

The information visualization technique used by Trendalyzer is an
interactive bubble chart. By default it shows five variables: two
numeric variables on the vertical and horizontal axes, bubble size and
color, and a time variable that may be manipulated with a slider. The
software uses brushing and linking techniques for displaying the
numeric value of a highlighted country.

This software was acquired by Google in 2007, and is now available as
a Motion Chart gadget and as the Public Data Explorer.

We will mimic the Trendalyzer/Motion Chart solution, using traveling
bubbles of different colors and with radius proportional to the values
of the variable =CO2.PPP=. Previously, you should watch the magistral
video "200 Countries, 200 Years, 4 Minutes"[fn:4].

Three packages are used here: =plotly=, =gganimate=, and =gridSVG=.

#+INDEX: Subjects!Animation

** plotly label:sec:plotly_animation
The =plotly= package has already been used in Section
ref:sec:plotly_horizontal to create an interactive graphic
representing time in the x-axis. In this section this package produces
an animation piping the result of the =plot_ly= and =add_markers=
functions through the =animation_slider= function.

#+INDEX: Packages!plotly@\texttt{plotly}

Variables =CO2.capita= and =GNI.capita= are represented in the x-axis
and y-axis, respectively.
#+begin_src R
library("plotly")

p <- plot_ly(CO2data,
             x = ~CO2.capita,
             y = ~GNI.capita,
             sizes = c(10, 100),
             marker = list(opacity = 0.7,
                           sizemode = 'diameter'))
#+end_src

=CO2.PPP= is encoded with the circle sizes, while =Country.Name= is
represented with colours and labels.
#+begin_src R
p <- add_markers(p,
                 size = ~CO2.PPP,
                 color = ~Country.Name,
                 text = ~Country.Name, hoverinfo = "text",
                 ids = ~Country.Name,
                 frame = ~Year,
                 showlegend = FALSE)
#+end_src

Finally, animation is created with =animation_opts=, to customize the
frame and transition times, and with =animation_slider= to define the
slider. Figure ref:fig:plotly_animation is an snapshot of this
animation.

#+begin_src R
p <- animation_opts(p,
                    frame = 1000,
                    transition = 800,
                    redraw = FALSE)

p <- animation_slider(p,
                      currentvalue = list(prefix = "Year "))

p
#+end_src

#+CAPTION: Snapshot of a Motion Chart produced with \texttt{plotly}. label:fig:plotly_animation
[[file:figs/TimeSeries/plotly_animation.png]]


#+RESULTS:

** =gganimate= label:sec:gganimate
#+begin_src R :exports none
##################################################################
## gganimate
##################################################################
#+end_src

#+INDEX: Packages!gganimate@\texttt{gganimate}

#+begin_src R
library("gganimate")
#+end_src

#+begin_src R 
pgvis <- ggplot(data = CO2data,
                aes(x = CO2.capita,
                    y = GNI.capita,
                    size = CO2.PPP,
                    color = Country.Name)) +
  geom_point(pch = 19) +
  scale_size(range = c(1, 12)) +
  scale_color_viridis_d() +
  theme_bw() +
  labs(title = 'Year: {trunc(frame_time)}',
       x = 'CO2 emissions (metric tons per capita)',
       y = 'GNI per capita, PPP (current international $)')
#+end_src

#+begin_src R :eval no-export
pgvis +
  transition_time(Year) +
  ease_aes("linear") +
  shadow_wake(wake_length = 0.3)
#+end_src

#+begin_src R :eval no-export
anim_save("figs/TimeSeries/CO2_gganimate.gif")
#+end_src

#+CAPTION: Snapshot of a motion chart produced with gganimate. label:fig:gganimate
[[file:figs/TimeSeries/CO2_gganimate.png]]


** \floweroneleft gridSVG label:sec:gridSVG
The final solution to create an animation is based on the function
=grid.animate= of the =gridSVG= package. 

The first step is to draw the initial state of the bubbles. Their
colors are again defined by the =palOrdered= palette (line [[(color)]]),
although the =adjustcolor= function is used for a ligther =fill=
color. Because there will not be a legend, there is no need to define
class intervals, and thus the radius is directly proportional to the
value of =CO2data$CO2.PPP= (line [[(radius)]]).

#+INDEX: Packages!gridSVG@\texttt{gridSVG}
#+INDEX: Packages!grid@\texttt{grid}

#+begin_src R -n -r
library("gridSVG")
library("grid")

xyplot(GNI.capita ~ CO2.capita,
       data = CO2data,
       xlab = "Carbon dioxide emissions (metric tons per capita)",
       ylab = "GNI per capita, PPP (current international $)",
       subset = Year==2000,
       groups = Country.Name,
       ## The limits of the graphic are defined
       ## with the entire dataset
       xlim = extendrange(CO2data$CO2.capita),
       ylim = extendrange(CO2data$GNI.capita),
       panel = function(x, y, ..., subscripts, groups) {
           color <- palOrdered[groups[subscripts]]                  (ref:color)
           radius <- CO2data$CO2.PPP[subscripts]                   (ref:radius)
           ## Size of labels
           cex <- 1.1*sqrt(radius)
           ## Bubbles
           grid.circle(x, y, default.units = "native",
                       r = radius*unit(.25, "inch"),
                       name = trellis.grobname("points", type = "panel"),
                       gp = gpar(col = color,
                               ## Fill color ligther than border
                               fill = adjustcolor(color, alpha = .5),
                               lwd = 2))
           ## Country labels
           grid.text(label = groups[subscripts],
                     x = unit(x, 'native'),
                     ## Labels above each bubble
                     y = unit(y, 'native') + 1.5 * radius *unit(.25, 'inch'),
                     name = trellis.grobname('labels', type = 'panel'),
                     gp = gpar(col = color, cex = cex))
       })
#+end_src

From this initial state, =grid.animate= creates a collection of
animated graphical objects with the result of =animUnit= (lines
[[(animUnitxp)]], [[(animUnityp)]], [[(animUnityl)]] and [[(animUnitsize)]]). This
function produces a set of values that will be interpreted by
=grid.animate= as intermediate states of a feature of the graphical
object (lines [[(ganimatePoints)]] and [[(ganimateLabels)]]). Thus, the
bubbles will travel across the values defined by =x_points= and
=y_points=, while their labels will use =x_points= and =x_labels=.

The use of =rep=TRUE= ensures that the animation will be repeated
indefinitely (lines [[(repPoints)]] and [[(repLabels)]]).

#+begin_src R -n -r 
## Duration in seconds of the animation
duration <- 20
  
nCountries <- nlevels(CO2data$Country.Name)
years <- unique(CO2data$Year)
nYears <- length(years)

## Intermediate positions of the bubbles
x_points <- animUnit(unit(CO2data$CO2.capita, 'native'),       (ref:animUnitxp)
                     id = rep(seq_len(nCountries), each = nYears))
y_points <- animUnit(unit(CO2data$GNI.capita, 'native'),       (ref:animUnityp)
                     id = rep(seq_len(nCountries), each = nYears))
## Intermediate positions of the labels
y_labels <- animUnit(unit(CO2data$GNI.capita, 'native') +      (ref:animUnityl)
                     1.5 * CO2data$CO2.PPP * unit(.25, 'inch'),
                     id = rep(seq_len(nCountries), each = nYears))
## Intermediate sizes of the bubbles
size <- animUnit(CO2data$CO2.PPP * unit(.25, 'inch'),        (ref:animUnitsize)
                 id = rep(seq_len(nCountries), each = nYears))

grid.animate(trellis.grobname("points", type = "panel",    (ref:ganimatePoints)
                              row = 1, col = 1),
             duration = duration,
             x = x_points,
             y = y_points,
             r = size,
             rep = TRUE)                                        (ref:repPoints)

grid.animate(trellis.grobname("labels", type = "panel",    (ref:ganimateLabels)
                              row = 1, col = 1),
             duration = duration,
             x = x_points,
             y = y_labels,
             rep = TRUE)                                        (ref:repLabels)

#+end_src

A bit of interactivity can be added with the =grid.hyperlink=
function. For example, the following code adds the corresponding
Wikipedia link to a mouse click on each bubble.

#+begin_src R
countries <- unique(CO2data$Country.Name)
URL <- paste('http://en.wikipedia.org/wiki/', countries, sep = '')
grid.hyperlink(trellis.grobname('points', type = 'panel', row = 1, col = 1),
               URL, group = FALSE)
  
#+end_src

Finally, the time information: The year is printed in the lower
right corner, using the =visibility= attribute of an animated
=textGrob= object to show and hide the values.
#+begin_src R
visibility <- matrix("hidden", nrow = nYears, ncol = nYears)
diag(visibility) <- "visible"
yearText <- animateGrob(garnishGrob(textGrob(years, .9, .15,
                                             name = "year",
                                             gp = gpar(cex = 2, col = "grey")),
                                    visibility = "hidden"),
                        duration = 20,
                        visibility = visibility,
                        rep = TRUE)
grid.draw(yearText)
#+end_src

The SVG file produced with =grid.export= is available at the website
of the book (Figure ref:fig:bubblesSVG). Because this animation does
not trace the paths, Figure ref:fig:CO2-GNI-DL provides this
information as a static complement.

#+begin_src R
grid.export("figs/TimeSeries/bubbles.svg")
#+end_src

#+RESULTS:

#+CAPTION: Animated bubbles produced with \texttt{gridSVG}. label:fig:bubblesSVG
[[file:figs/TimeSeries/bubbles.png]]


* Footnotes

[fn:2] http://colorbrewer2.org/

[fn:4] http://www.gapminder.org/videos/200-years-that-changed-the-world-bbc/

[fn:5] [[http://www.gapminder.org/]]

